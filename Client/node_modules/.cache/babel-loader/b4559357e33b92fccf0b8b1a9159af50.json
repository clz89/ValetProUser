{"ast":null,"code":"\"use strict\";\n/*\r\n* Copyright 2012 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // package com.google.zxing.pdf417.decoder.ec;\n\nvar IllegalArgumentException_1 = require(\"../../../IllegalArgumentException\");\n\nvar System_1 = require(\"../../../util/System\");\n\nvar StringBuilder_1 = require(\"../../../util/StringBuilder\");\n/**\r\n * @author Sean Owen\r\n * @see com.google.zxing.common.reedsolomon.GenericGFPoly\r\n */\n\n\nvar ModulusPoly =\n/** @class */\nfunction () {\n  function ModulusPoly(field, coefficients) {\n    if (coefficients.length === 0) {\n      throw new IllegalArgumentException_1.default();\n    }\n\n    this.field = field;\n    var coefficientsLength =\n    /*int*/\n    coefficients.length;\n\n    if (coefficientsLength > 1 && coefficients[0] === 0) {\n      // Leading term must be non-zero for anything except the constant polynomial \"0\"\n      var firstNonZero =\n      /*int*/\n      1;\n\n      while (firstNonZero < coefficientsLength && coefficients[firstNonZero] === 0) {\n        firstNonZero++;\n      }\n\n      if (firstNonZero === coefficientsLength) {\n        this.coefficients = new Int32Array([0]);\n      } else {\n        this.coefficients = new Int32Array(coefficientsLength - firstNonZero);\n        System_1.default.arraycopy(coefficients, firstNonZero, this.coefficients, 0, this.coefficients.length);\n      }\n    } else {\n      this.coefficients = coefficients;\n    }\n  }\n\n  ModulusPoly.prototype.getCoefficients = function () {\n    return this.coefficients;\n  };\n  /**\r\n   * @return degree of this polynomial\r\n   */\n\n\n  ModulusPoly.prototype.getDegree = function () {\n    return this.coefficients.length - 1;\n  };\n  /**\r\n   * @return true iff this polynomial is the monomial \"0\"\r\n   */\n\n\n  ModulusPoly.prototype.isZero = function () {\n    return this.coefficients[0] === 0;\n  };\n  /**\r\n   * @return coefficient of x^degree term in this polynomial\r\n   */\n\n\n  ModulusPoly.prototype.getCoefficient = function (degree) {\n    return this.coefficients[this.coefficients.length - 1 - degree];\n  };\n  /**\r\n   * @return evaluation of this polynomial at a given point\r\n   */\n\n\n  ModulusPoly.prototype.evaluateAt = function (a) {\n    var e_1, _a;\n\n    if (a === 0) {\n      // Just return the x^0 coefficient\n      return this.getCoefficient(0);\n    }\n\n    if (a === 1) {\n      // Just the sum of the coefficients\n      var sum =\n      /*int*/\n      0;\n\n      try {\n        for (var _b = __values(this.coefficients), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var coefficient = _c.value\n          /*int*/\n          ;\n          sum = this.field.add(sum, coefficient);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      return sum;\n    }\n\n    var result =\n    /*int*/\n    this.coefficients[0];\n    var size =\n    /*int*/\n    this.coefficients.length;\n\n    for (var i\n    /*int*/\n    = 1; i < size; i++) {\n      result = this.field.add(this.field.multiply(a, result), this.coefficients[i]);\n    }\n\n    return result;\n  };\n\n  ModulusPoly.prototype.add = function (other) {\n    if (!this.field.equals(other.field)) {\n      throw new IllegalArgumentException_1.default('ModulusPolys do not have same ModulusGF field');\n    }\n\n    if (this.isZero()) {\n      return other;\n    }\n\n    if (other.isZero()) {\n      return this;\n    }\n\n    var smallerCoefficients = this.coefficients;\n    var largerCoefficients = other.coefficients;\n\n    if (smallerCoefficients.length > largerCoefficients.length) {\n      var temp = smallerCoefficients;\n      smallerCoefficients = largerCoefficients;\n      largerCoefficients = temp;\n    }\n\n    var sumDiff = new Int32Array(largerCoefficients.length);\n    var lengthDiff =\n    /*int*/\n    largerCoefficients.length - smallerCoefficients.length; // Copy high-order terms only found in higher-degree polynomial's coefficients\n\n    System_1.default.arraycopy(largerCoefficients, 0, sumDiff, 0, lengthDiff);\n\n    for (var i\n    /*int*/\n    = lengthDiff; i < largerCoefficients.length; i++) {\n      sumDiff[i] = this.field.add(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);\n    }\n\n    return new ModulusPoly(this.field, sumDiff);\n  };\n\n  ModulusPoly.prototype.subtract = function (other) {\n    if (!this.field.equals(other.field)) {\n      throw new IllegalArgumentException_1.default('ModulusPolys do not have same ModulusGF field');\n    }\n\n    if (other.isZero()) {\n      return this;\n    }\n\n    return this.add(other.negative());\n  };\n\n  ModulusPoly.prototype.multiply = function (other) {\n    if (other instanceof ModulusPoly) {\n      return this.multiplyOther(other);\n    }\n\n    return this.multiplyScalar(other);\n  };\n\n  ModulusPoly.prototype.multiplyOther = function (other) {\n    if (!this.field.equals(other.field)) {\n      throw new IllegalArgumentException_1.default('ModulusPolys do not have same ModulusGF field');\n    }\n\n    if (this.isZero() || other.isZero()) {\n      // return this.field.getZero();\n      return new ModulusPoly(this.field, new Int32Array([0]));\n    }\n\n    var aCoefficients = this.coefficients;\n    var aLength =\n    /*int*/\n    aCoefficients.length;\n    var bCoefficients = other.coefficients;\n    var bLength =\n    /*int*/\n    bCoefficients.length;\n    var product = new Int32Array(aLength + bLength - 1);\n\n    for (var i\n    /*int*/\n    = 0; i < aLength; i++) {\n      var aCoeff =\n      /*int*/\n      aCoefficients[i];\n\n      for (var j\n      /*int*/\n      = 0; j < bLength; j++) {\n        product[i + j] = this.field.add(product[i + j], this.field.multiply(aCoeff, bCoefficients[j]));\n      }\n    }\n\n    return new ModulusPoly(this.field, product);\n  };\n\n  ModulusPoly.prototype.negative = function () {\n    var size =\n    /*int*/\n    this.coefficients.length;\n    var negativeCoefficients = new Int32Array(size);\n\n    for (var i\n    /*int*/\n    = 0; i < size; i++) {\n      negativeCoefficients[i] = this.field.subtract(0, this.coefficients[i]);\n    }\n\n    return new ModulusPoly(this.field, negativeCoefficients);\n  };\n\n  ModulusPoly.prototype.multiplyScalar = function (scalar) {\n    if (scalar === 0) {\n      return new ModulusPoly(this.field, new Int32Array([0]));\n    }\n\n    if (scalar === 1) {\n      return this;\n    }\n\n    var size =\n    /*int*/\n    this.coefficients.length;\n    var product = new Int32Array(size);\n\n    for (var i\n    /*int*/\n    = 0; i < size; i++) {\n      product[i] = this.field.multiply(this.coefficients[i], scalar);\n    }\n\n    return new ModulusPoly(this.field, product);\n  };\n\n  ModulusPoly.prototype.multiplyByMonomial = function (degree, coefficient) {\n    if (degree < 0) {\n      throw new IllegalArgumentException_1.default();\n    }\n\n    if (coefficient === 0) {\n      return new ModulusPoly(this.field, new Int32Array([0]));\n    }\n\n    var size =\n    /*int*/\n    this.coefficients.length;\n    var product = new Int32Array(size + degree);\n\n    for (var i\n    /*int*/\n    = 0; i < size; i++) {\n      product[i] = this.field.multiply(this.coefficients[i], coefficient);\n    }\n\n    return new ModulusPoly(this.field, product);\n  };\n  /*\r\n  ModulusPoly[] divide(other: ModulusPoly) {\r\n    if (!field.equals(other.field)) {\r\n      throw new IllegalArgumentException(\"ModulusPolys do not have same ModulusGF field\");\r\n    }\r\n    if (other.isZero()) {\r\n      throw new IllegalArgumentException(\"Divide by 0\");\r\n    }\r\n        let quotient: ModulusPoly = field.getZero();\r\n    let remainder: ModulusPoly = this;\r\n        let denominatorLeadingTerm: /*int/ number = other.getCoefficient(other.getDegree());\r\n    let inverseDenominatorLeadingTerm: /*int/ number = field.inverse(denominatorLeadingTerm);\r\n        while (remainder.getDegree() >= other.getDegree() && !remainder.isZero()) {\r\n      let degreeDifference: /*int/ number = remainder.getDegree() - other.getDegree();\r\n      let scale: /*int/ number = field.multiply(remainder.getCoefficient(remainder.getDegree()), inverseDenominatorLeadingTerm);\r\n      let term: ModulusPoly = other.multiplyByMonomial(degreeDifference, scale);\r\n      let iterationQuotient: ModulusPoly = field.buildMonomial(degreeDifference, scale);\r\n      quotient = quotient.add(iterationQuotient);\r\n      remainder = remainder.subtract(term);\r\n    }\r\n        return new ModulusPoly[] { quotient, remainder };\r\n  }\r\n  */\n  // @Override\n\n\n  ModulusPoly.prototype.toString = function () {\n    var result = new StringBuilder_1.default(); // dynamic string size in JS\n\n    /*8 * this.getDegree()*/\n    for (var degree\n    /*int*/\n    = this.getDegree(); degree >= 0; degree--) {\n      var coefficient =\n      /*int*/\n      this.getCoefficient(degree);\n\n      if (coefficient !== 0) {\n        if (coefficient < 0) {\n          result.append(' - ');\n          coefficient = -coefficient;\n        } else {\n          if (result.length() > 0) {\n            result.append(' + ');\n          }\n        }\n\n        if (degree === 0 || coefficient !== 1) {\n          result.append(coefficient);\n        }\n\n        if (degree !== 0) {\n          if (degree === 1) {\n            result.append('x');\n          } else {\n            result.append('x^');\n            result.append(degree);\n          }\n        }\n      }\n    }\n\n    return result.toString();\n  };\n\n  return ModulusPoly;\n}();\n\nexports.default = ModulusPoly;","map":{"version":3,"sources":["../../../../../src/core/pdf417/decoder/ec/ModulusPoly.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\n/*\r\n* Copyright 2012 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\nvar __values = (this && this.__values) || function (o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// package com.google.zxing.pdf417.decoder.ec;\r\nvar IllegalArgumentException_1 = require(\"../../../IllegalArgumentException\");\r\nvar System_1 = require(\"../../../util/System\");\r\nvar StringBuilder_1 = require(\"../../../util/StringBuilder\");\r\n/**\r\n * @author Sean Owen\r\n * @see com.google.zxing.common.reedsolomon.GenericGFPoly\r\n */\r\nvar ModulusPoly = /** @class */ (function () {\r\n    function ModulusPoly(field, coefficients) {\r\n        if (coefficients.length === 0) {\r\n            throw new IllegalArgumentException_1.default();\r\n        }\r\n        this.field = field;\r\n        var coefficientsLength = /*int*/ coefficients.length;\r\n        if (coefficientsLength > 1 && coefficients[0] === 0) {\r\n            // Leading term must be non-zero for anything except the constant polynomial \"0\"\r\n            var firstNonZero = /*int*/ 1;\r\n            while (firstNonZero < coefficientsLength && coefficients[firstNonZero] === 0) {\r\n                firstNonZero++;\r\n            }\r\n            if (firstNonZero === coefficientsLength) {\r\n                this.coefficients = new Int32Array([0]);\r\n            }\r\n            else {\r\n                this.coefficients = new Int32Array(coefficientsLength - firstNonZero);\r\n                System_1.default.arraycopy(coefficients, firstNonZero, this.coefficients, 0, this.coefficients.length);\r\n            }\r\n        }\r\n        else {\r\n            this.coefficients = coefficients;\r\n        }\r\n    }\r\n    ModulusPoly.prototype.getCoefficients = function () {\r\n        return this.coefficients;\r\n    };\r\n    /**\r\n     * @return degree of this polynomial\r\n     */\r\n    ModulusPoly.prototype.getDegree = function () {\r\n        return this.coefficients.length - 1;\r\n    };\r\n    /**\r\n     * @return true iff this polynomial is the monomial \"0\"\r\n     */\r\n    ModulusPoly.prototype.isZero = function () {\r\n        return this.coefficients[0] === 0;\r\n    };\r\n    /**\r\n     * @return coefficient of x^degree term in this polynomial\r\n     */\r\n    ModulusPoly.prototype.getCoefficient = function (degree) {\r\n        return this.coefficients[this.coefficients.length - 1 - degree];\r\n    };\r\n    /**\r\n     * @return evaluation of this polynomial at a given point\r\n     */\r\n    ModulusPoly.prototype.evaluateAt = function (a) {\r\n        var e_1, _a;\r\n        if (a === 0) {\r\n            // Just return the x^0 coefficient\r\n            return this.getCoefficient(0);\r\n        }\r\n        if (a === 1) {\r\n            // Just the sum of the coefficients\r\n            var sum = /*int*/ 0;\r\n            try {\r\n                for (var _b = __values(this.coefficients), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                    var coefficient = _c.value /*int*/;\r\n                    sum = this.field.add(sum, coefficient);\r\n                }\r\n            }\r\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n            finally {\r\n                try {\r\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n                }\r\n                finally { if (e_1) throw e_1.error; }\r\n            }\r\n            return sum;\r\n        }\r\n        var result = /*int*/ this.coefficients[0];\r\n        var size = /*int*/ this.coefficients.length;\r\n        for (var i /*int*/ = 1; i < size; i++) {\r\n            result = this.field.add(this.field.multiply(a, result), this.coefficients[i]);\r\n        }\r\n        return result;\r\n    };\r\n    ModulusPoly.prototype.add = function (other) {\r\n        if (!this.field.equals(other.field)) {\r\n            throw new IllegalArgumentException_1.default('ModulusPolys do not have same ModulusGF field');\r\n        }\r\n        if (this.isZero()) {\r\n            return other;\r\n        }\r\n        if (other.isZero()) {\r\n            return this;\r\n        }\r\n        var smallerCoefficients = this.coefficients;\r\n        var largerCoefficients = other.coefficients;\r\n        if (smallerCoefficients.length > largerCoefficients.length) {\r\n            var temp = smallerCoefficients;\r\n            smallerCoefficients = largerCoefficients;\r\n            largerCoefficients = temp;\r\n        }\r\n        var sumDiff = new Int32Array(largerCoefficients.length);\r\n        var lengthDiff = /*int*/ largerCoefficients.length - smallerCoefficients.length;\r\n        // Copy high-order terms only found in higher-degree polynomial's coefficients\r\n        System_1.default.arraycopy(largerCoefficients, 0, sumDiff, 0, lengthDiff);\r\n        for (var i /*int*/ = lengthDiff; i < largerCoefficients.length; i++) {\r\n            sumDiff[i] = this.field.add(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);\r\n        }\r\n        return new ModulusPoly(this.field, sumDiff);\r\n    };\r\n    ModulusPoly.prototype.subtract = function (other) {\r\n        if (!this.field.equals(other.field)) {\r\n            throw new IllegalArgumentException_1.default('ModulusPolys do not have same ModulusGF field');\r\n        }\r\n        if (other.isZero()) {\r\n            return this;\r\n        }\r\n        return this.add(other.negative());\r\n    };\r\n    ModulusPoly.prototype.multiply = function (other) {\r\n        if (other instanceof ModulusPoly) {\r\n            return this.multiplyOther(other);\r\n        }\r\n        return this.multiplyScalar(other);\r\n    };\r\n    ModulusPoly.prototype.multiplyOther = function (other) {\r\n        if (!this.field.equals(other.field)) {\r\n            throw new IllegalArgumentException_1.default('ModulusPolys do not have same ModulusGF field');\r\n        }\r\n        if (this.isZero() || other.isZero()) {\r\n            // return this.field.getZero();\r\n            return new ModulusPoly(this.field, new Int32Array([0]));\r\n        }\r\n        var aCoefficients = this.coefficients;\r\n        var aLength = /*int*/ aCoefficients.length;\r\n        var bCoefficients = other.coefficients;\r\n        var bLength = /*int*/ bCoefficients.length;\r\n        var product = new Int32Array(aLength + bLength - 1);\r\n        for (var i /*int*/ = 0; i < aLength; i++) {\r\n            var aCoeff = /*int*/ aCoefficients[i];\r\n            for (var j /*int*/ = 0; j < bLength; j++) {\r\n                product[i + j] = this.field.add(product[i + j], this.field.multiply(aCoeff, bCoefficients[j]));\r\n            }\r\n        }\r\n        return new ModulusPoly(this.field, product);\r\n    };\r\n    ModulusPoly.prototype.negative = function () {\r\n        var size = /*int*/ this.coefficients.length;\r\n        var negativeCoefficients = new Int32Array(size);\r\n        for (var i /*int*/ = 0; i < size; i++) {\r\n            negativeCoefficients[i] = this.field.subtract(0, this.coefficients[i]);\r\n        }\r\n        return new ModulusPoly(this.field, negativeCoefficients);\r\n    };\r\n    ModulusPoly.prototype.multiplyScalar = function (scalar) {\r\n        if (scalar === 0) {\r\n            return new ModulusPoly(this.field, new Int32Array([0]));\r\n        }\r\n        if (scalar === 1) {\r\n            return this;\r\n        }\r\n        var size = /*int*/ this.coefficients.length;\r\n        var product = new Int32Array(size);\r\n        for (var i /*int*/ = 0; i < size; i++) {\r\n            product[i] = this.field.multiply(this.coefficients[i], scalar);\r\n        }\r\n        return new ModulusPoly(this.field, product);\r\n    };\r\n    ModulusPoly.prototype.multiplyByMonomial = function (degree, coefficient) {\r\n        if (degree < 0) {\r\n            throw new IllegalArgumentException_1.default();\r\n        }\r\n        if (coefficient === 0) {\r\n            return new ModulusPoly(this.field, new Int32Array([0]));\r\n        }\r\n        var size = /*int*/ this.coefficients.length;\r\n        var product = new Int32Array(size + degree);\r\n        for (var i /*int*/ = 0; i < size; i++) {\r\n            product[i] = this.field.multiply(this.coefficients[i], coefficient);\r\n        }\r\n        return new ModulusPoly(this.field, product);\r\n    };\r\n    /*\r\n    ModulusPoly[] divide(other: ModulusPoly) {\r\n      if (!field.equals(other.field)) {\r\n        throw new IllegalArgumentException(\"ModulusPolys do not have same ModulusGF field\");\r\n      }\r\n      if (other.isZero()) {\r\n        throw new IllegalArgumentException(\"Divide by 0\");\r\n      }\r\n  \r\n      let quotient: ModulusPoly = field.getZero();\r\n      let remainder: ModulusPoly = this;\r\n  \r\n      let denominatorLeadingTerm: /*int/ number = other.getCoefficient(other.getDegree());\r\n      let inverseDenominatorLeadingTerm: /*int/ number = field.inverse(denominatorLeadingTerm);\r\n  \r\n      while (remainder.getDegree() >= other.getDegree() && !remainder.isZero()) {\r\n        let degreeDifference: /*int/ number = remainder.getDegree() - other.getDegree();\r\n        let scale: /*int/ number = field.multiply(remainder.getCoefficient(remainder.getDegree()), inverseDenominatorLeadingTerm);\r\n        let term: ModulusPoly = other.multiplyByMonomial(degreeDifference, scale);\r\n        let iterationQuotient: ModulusPoly = field.buildMonomial(degreeDifference, scale);\r\n        quotient = quotient.add(iterationQuotient);\r\n        remainder = remainder.subtract(term);\r\n      }\r\n  \r\n      return new ModulusPoly[] { quotient, remainder };\r\n    }\r\n    */\r\n    // @Override\r\n    ModulusPoly.prototype.toString = function () {\r\n        var result = new StringBuilder_1.default( /*8 * this.getDegree()*/); // dynamic string size in JS\r\n        for (var degree /*int*/ = this.getDegree(); degree >= 0; degree--) {\r\n            var coefficient = /*int*/ this.getCoefficient(degree);\r\n            if (coefficient !== 0) {\r\n                if (coefficient < 0) {\r\n                    result.append(' - ');\r\n                    coefficient = -coefficient;\r\n                }\r\n                else {\r\n                    if (result.length() > 0) {\r\n                        result.append(' + ');\r\n                    }\r\n                }\r\n                if (degree === 0 || coefficient !== 1) {\r\n                    result.append(coefficient);\r\n                }\r\n                if (degree !== 0) {\r\n                    if (degree === 1) {\r\n                        result.append('x');\r\n                    }\r\n                    else {\r\n                        result.append('x^');\r\n                        result.append(degree);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return result.toString();\r\n    };\r\n    return ModulusPoly;\r\n}());\r\nexports.default = ModulusPoly;\r\n//# sourceMappingURL=ModulusPoly.js.map"]},"metadata":{},"sourceType":"script"}