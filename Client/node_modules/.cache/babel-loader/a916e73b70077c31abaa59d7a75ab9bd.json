{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar System_1 = require(\"./System\");\n\nvar IllegalArgumentException_1 = require(\"../IllegalArgumentException\");\n\nvar ArrayIndexOutOfBoundsException_1 = require(\"../ArrayIndexOutOfBoundsException\");\n\nvar Arrays =\n/** @class */\nfunction () {\n  function Arrays() {}\n  /**\r\n   * Assigns the specified int value to each element of the specified array\r\n   * of ints.\r\n   *\r\n   * @param a the array to be filled\r\n   * @param val the value to be stored in all elements of the array\r\n   */\n\n\n  Arrays.fill = function (a, val) {\n    for (var i = 0, len = a.length; i < len; i++) a[i] = val;\n  };\n  /**\r\n   * Assigns the specified int value to each element of the specified\r\n   * range of the specified array of ints.  The range to be filled\r\n   * extends from index {@code fromIndex}, inclusive, to index\r\n   * {@code toIndex}, exclusive.  (If {@code fromIndex==toIndex}, the\r\n   * range to be filled is empty.)\r\n   *\r\n   * @param a the array to be filled\r\n   * @param fromIndex the index of the first element (inclusive) to be\r\n   *        filled with the specified value\r\n   * @param toIndex the index of the last element (exclusive) to be\r\n   *        filled with the specified value\r\n   * @param val the value to be stored in all elements of the array\r\n   * @throws IllegalArgumentException if {@code fromIndex > toIndex}\r\n   * @throws ArrayIndexOutOfBoundsException if {@code fromIndex < 0} or\r\n   *         {@code toIndex > a.length}\r\n   */\n\n\n  Arrays.fillWithin = function (a, fromIndex, toIndex, val) {\n    Arrays.rangeCheck(a.length, fromIndex, toIndex);\n\n    for (var i = fromIndex; i < toIndex; i++) a[i] = val;\n  };\n  /**\r\n   * Checks that {@code fromIndex} and {@code toIndex} are in\r\n   * the range and throws an exception if they aren't.\r\n   */\n\n\n  Arrays.rangeCheck = function (arrayLength, fromIndex, toIndex) {\n    if (fromIndex > toIndex) {\n      throw new IllegalArgumentException_1.default('fromIndex(' + fromIndex + ') > toIndex(' + toIndex + ')');\n    }\n\n    if (fromIndex < 0) {\n      throw new ArrayIndexOutOfBoundsException_1.default(fromIndex);\n    }\n\n    if (toIndex > arrayLength) {\n      throw new ArrayIndexOutOfBoundsException_1.default(toIndex);\n    }\n  };\n\n  Arrays.asList = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return args;\n  };\n\n  Arrays.create = function (rows, cols, value) {\n    var arr = Array.from({\n      length: rows\n    });\n    return arr.map(function (x) {\n      return Array.from({\n        length: cols\n      }).fill(value);\n    });\n  };\n\n  Arrays.createInt32Array = function (rows, cols, value) {\n    var arr = Array.from({\n      length: rows\n    });\n    return arr.map(function (x) {\n      return Int32Array.from({\n        length: cols\n      }).fill(value);\n    });\n  };\n\n  Arrays.equals = function (first, second) {\n    if (!first) {\n      return false;\n    }\n\n    if (!second) {\n      return false;\n    }\n\n    if (!first.length) {\n      return false;\n    }\n\n    if (!second.length) {\n      return false;\n    }\n\n    if (first.length !== second.length) {\n      return false;\n    }\n\n    for (var i = 0, length_1 = first.length; i < length_1; i++) {\n      if (first[i] !== second[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  Arrays.hashCode = function (a) {\n    var e_1, _a;\n\n    if (a === null) {\n      return 0;\n    }\n\n    var result = 1;\n\n    try {\n      for (var a_1 = __values(a), a_1_1 = a_1.next(); !a_1_1.done; a_1_1 = a_1.next()) {\n        var element = a_1_1.value;\n        result = 31 * result + element;\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (a_1_1 && !a_1_1.done && (_a = a_1.return)) _a.call(a_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return result;\n  };\n\n  Arrays.fillUint8Array = function (a, value) {\n    for (var i = 0; i !== a.length; i++) {\n      a[i] = value;\n    }\n  };\n\n  Arrays.copyOf = function (original, newLength) {\n    return original.slice(0, newLength);\n  };\n\n  Arrays.copyOfUint8Array = function (original, newLength) {\n    if (original.length <= newLength) {\n      var newArray = new Uint8Array(newLength);\n      newArray.set(original);\n      return newArray;\n    }\n\n    return original.slice(0, newLength);\n  };\n\n  Arrays.copyOfRange = function (original, from, to) {\n    var newLength = to - from;\n    var copy = new Int32Array(newLength);\n    System_1.default.arraycopy(original, from, copy, 0, newLength);\n    return copy;\n  };\n  /*\r\n  * Returns the index of of the element in a sorted array or (-n-1) where n is the insertion point\r\n  * for the new element.\r\n  * Parameters:\r\n  *     ar - A sorted array\r\n  *     el - An element to search for\r\n  *     comparator - A comparator function. The function takes two arguments: (a, b) and returns:\r\n  *        a negative number  if a is less than b;\r\n  *        0 if a is equal to b;\r\n  *        a positive number of a is greater than b.\r\n  * The array may contain duplicate elements. If there are more than one equal elements in the array,\r\n  * the returned value can be the index of any one of the equal elements.\r\n  *\r\n  * http://jsfiddle.net/aryzhov/pkfst550/\r\n  */\n\n\n  Arrays.binarySearch = function (ar, el, comparator) {\n    if (undefined === comparator) {\n      comparator = Arrays.numberComparator;\n    }\n\n    var m = 0;\n    var n = ar.length - 1;\n\n    while (m <= n) {\n      var k = n + m >> 1;\n      var cmp = comparator(el, ar[k]);\n\n      if (cmp > 0) {\n        m = k + 1;\n      } else if (cmp < 0) {\n        n = k - 1;\n      } else {\n        return k;\n      }\n    }\n\n    return -m - 1;\n  };\n\n  Arrays.numberComparator = function (a, b) {\n    return a - b;\n  };\n\n  return Arrays;\n}();\n\nexports.default = Arrays;","map":{"version":3,"sources":["../../../src/core/util/Arrays.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __values = (this && this.__values) || function (o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar System_1 = require(\"./System\");\r\nvar IllegalArgumentException_1 = require(\"../IllegalArgumentException\");\r\nvar ArrayIndexOutOfBoundsException_1 = require(\"../ArrayIndexOutOfBoundsException\");\r\nvar Arrays = /** @class */ (function () {\r\n    function Arrays() {\r\n    }\r\n    /**\r\n     * Assigns the specified int value to each element of the specified array\r\n     * of ints.\r\n     *\r\n     * @param a the array to be filled\r\n     * @param val the value to be stored in all elements of the array\r\n     */\r\n    Arrays.fill = function (a, val) {\r\n        for (var i = 0, len = a.length; i < len; i++)\r\n            a[i] = val;\r\n    };\r\n    /**\r\n     * Assigns the specified int value to each element of the specified\r\n     * range of the specified array of ints.  The range to be filled\r\n     * extends from index {@code fromIndex}, inclusive, to index\r\n     * {@code toIndex}, exclusive.  (If {@code fromIndex==toIndex}, the\r\n     * range to be filled is empty.)\r\n     *\r\n     * @param a the array to be filled\r\n     * @param fromIndex the index of the first element (inclusive) to be\r\n     *        filled with the specified value\r\n     * @param toIndex the index of the last element (exclusive) to be\r\n     *        filled with the specified value\r\n     * @param val the value to be stored in all elements of the array\r\n     * @throws IllegalArgumentException if {@code fromIndex > toIndex}\r\n     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex < 0} or\r\n     *         {@code toIndex > a.length}\r\n     */\r\n    Arrays.fillWithin = function (a, fromIndex, toIndex, val) {\r\n        Arrays.rangeCheck(a.length, fromIndex, toIndex);\r\n        for (var i = fromIndex; i < toIndex; i++)\r\n            a[i] = val;\r\n    };\r\n    /**\r\n     * Checks that {@code fromIndex} and {@code toIndex} are in\r\n     * the range and throws an exception if they aren't.\r\n     */\r\n    Arrays.rangeCheck = function (arrayLength, fromIndex, toIndex) {\r\n        if (fromIndex > toIndex) {\r\n            throw new IllegalArgumentException_1.default('fromIndex(' + fromIndex + ') > toIndex(' + toIndex + ')');\r\n        }\r\n        if (fromIndex < 0) {\r\n            throw new ArrayIndexOutOfBoundsException_1.default(fromIndex);\r\n        }\r\n        if (toIndex > arrayLength) {\r\n            throw new ArrayIndexOutOfBoundsException_1.default(toIndex);\r\n        }\r\n    };\r\n    Arrays.asList = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        return args;\r\n    };\r\n    Arrays.create = function (rows, cols, value) {\r\n        var arr = Array.from({ length: rows });\r\n        return arr.map(function (x) { return Array.from({ length: cols }).fill(value); });\r\n    };\r\n    Arrays.createInt32Array = function (rows, cols, value) {\r\n        var arr = Array.from({ length: rows });\r\n        return arr.map(function (x) { return Int32Array.from({ length: cols }).fill(value); });\r\n    };\r\n    Arrays.equals = function (first, second) {\r\n        if (!first) {\r\n            return false;\r\n        }\r\n        if (!second) {\r\n            return false;\r\n        }\r\n        if (!first.length) {\r\n            return false;\r\n        }\r\n        if (!second.length) {\r\n            return false;\r\n        }\r\n        if (first.length !== second.length) {\r\n            return false;\r\n        }\r\n        for (var i = 0, length_1 = first.length; i < length_1; i++) {\r\n            if (first[i] !== second[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    Arrays.hashCode = function (a) {\r\n        var e_1, _a;\r\n        if (a === null) {\r\n            return 0;\r\n        }\r\n        var result = 1;\r\n        try {\r\n            for (var a_1 = __values(a), a_1_1 = a_1.next(); !a_1_1.done; a_1_1 = a_1.next()) {\r\n                var element = a_1_1.value;\r\n                result = 31 * result + element;\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (a_1_1 && !a_1_1.done && (_a = a_1.return)) _a.call(a_1);\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n        return result;\r\n    };\r\n    Arrays.fillUint8Array = function (a, value) {\r\n        for (var i = 0; i !== a.length; i++) {\r\n            a[i] = value;\r\n        }\r\n    };\r\n    Arrays.copyOf = function (original, newLength) {\r\n        return original.slice(0, newLength);\r\n    };\r\n    Arrays.copyOfUint8Array = function (original, newLength) {\r\n        if (original.length <= newLength) {\r\n            var newArray = new Uint8Array(newLength);\r\n            newArray.set(original);\r\n            return newArray;\r\n        }\r\n        return original.slice(0, newLength);\r\n    };\r\n    Arrays.copyOfRange = function (original, from, to) {\r\n        var newLength = to - from;\r\n        var copy = new Int32Array(newLength);\r\n        System_1.default.arraycopy(original, from, copy, 0, newLength);\r\n        return copy;\r\n    };\r\n    /*\r\n    * Returns the index of of the element in a sorted array or (-n-1) where n is the insertion point\r\n    * for the new element.\r\n    * Parameters:\r\n    *     ar - A sorted array\r\n    *     el - An element to search for\r\n    *     comparator - A comparator function. The function takes two arguments: (a, b) and returns:\r\n    *        a negative number  if a is less than b;\r\n    *        0 if a is equal to b;\r\n    *        a positive number of a is greater than b.\r\n    * The array may contain duplicate elements. If there are more than one equal elements in the array,\r\n    * the returned value can be the index of any one of the equal elements.\r\n    *\r\n    * http://jsfiddle.net/aryzhov/pkfst550/\r\n    */\r\n    Arrays.binarySearch = function (ar, el, comparator) {\r\n        if (undefined === comparator) {\r\n            comparator = Arrays.numberComparator;\r\n        }\r\n        var m = 0;\r\n        var n = ar.length - 1;\r\n        while (m <= n) {\r\n            var k = (n + m) >> 1;\r\n            var cmp = comparator(el, ar[k]);\r\n            if (cmp > 0) {\r\n                m = k + 1;\r\n            }\r\n            else if (cmp < 0) {\r\n                n = k - 1;\r\n            }\r\n            else {\r\n                return k;\r\n            }\r\n        }\r\n        return -m - 1;\r\n    };\r\n    Arrays.numberComparator = function (a, b) {\r\n        return a - b;\r\n    };\r\n    return Arrays;\r\n}());\r\nexports.default = Arrays;\r\n//# sourceMappingURL=Arrays.js.map"]},"metadata":{},"sourceType":"script"}