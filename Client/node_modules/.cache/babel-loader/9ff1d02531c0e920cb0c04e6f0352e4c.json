{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * Java Formatter class polyfill that works in the JS way.\r\n */\n\nvar Formatter =\n/** @class */\nfunction () {\n  function Formatter() {\n    this.buffer = '';\n  }\n  /**\r\n   *\r\n   * @see https://stackoverflow.com/a/13439711/4367683\r\n   *\r\n   * @param str\r\n   * @param arr\r\n   */\n\n\n  Formatter.form = function (str, arr) {\n    var i = -1;\n\n    function callback(exp, p0, p1, p2, p3, p4) {\n      if (exp === '%%') return '%';\n      if (arr[++i] === undefined) return undefined;\n      exp = p2 ? parseInt(p2.substr(1)) : undefined;\n      var base = p3 ? parseInt(p3.substr(1)) : undefined;\n      var val;\n\n      switch (p4) {\n        case 's':\n          val = arr[i];\n          break;\n\n        case 'c':\n          val = arr[i][0];\n          break;\n\n        case 'f':\n          val = parseFloat(arr[i]).toFixed(exp);\n          break;\n\n        case 'p':\n          val = parseFloat(arr[i]).toPrecision(exp);\n          break;\n\n        case 'e':\n          val = parseFloat(arr[i]).toExponential(exp);\n          break;\n\n        case 'x':\n          val = parseInt(arr[i]).toString(base ? base : 16);\n          break;\n\n        case 'd':\n          val = parseFloat(parseInt(arr[i], base ? base : 10).toPrecision(exp)).toFixed(0);\n          break;\n      }\n\n      val = typeof val === 'object' ? JSON.stringify(val) : (+val).toString(base);\n      var size = parseInt(p1);\n      /* padding size */\n\n      var ch = p1 && p1[0] + '' === '0' ? '0' : ' ';\n      /* isnull? */\n\n      while (val.length < size) val = p0 !== undefined ? val + ch : ch + val;\n      /* isminus? */\n\n\n      return val;\n    }\n\n    var regex = /%(-)?(0?[0-9]+)?([.][0-9]+)?([#][0-9]+)?([scfpexd%])/g;\n    return str.replace(regex, callback);\n  };\n  /**\r\n   *\r\n   * @param append The new string to append.\r\n   * @param args Argumets values to be formated.\r\n   */\n\n\n  Formatter.prototype.format = function (append) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    this.buffer += Formatter.form(append, args);\n  };\n  /**\r\n   * Returns the Formatter string value.\r\n   */\n\n\n  Formatter.prototype.toString = function () {\n    return this.buffer;\n  };\n\n  return Formatter;\n}();\n\nexports.default = Formatter;","map":{"version":3,"sources":["../../../src/core/util/Formatter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Java Formatter class polyfill that works in the JS way.\r\n */\r\nvar Formatter = /** @class */ (function () {\r\n    function Formatter() {\r\n        this.buffer = '';\r\n    }\r\n    /**\r\n     *\r\n     * @see https://stackoverflow.com/a/13439711/4367683\r\n     *\r\n     * @param str\r\n     * @param arr\r\n     */\r\n    Formatter.form = function (str, arr) {\r\n        var i = -1;\r\n        function callback(exp, p0, p1, p2, p3, p4) {\r\n            if (exp === '%%')\r\n                return '%';\r\n            if (arr[++i] === undefined)\r\n                return undefined;\r\n            exp = p2 ? parseInt(p2.substr(1)) : undefined;\r\n            var base = p3 ? parseInt(p3.substr(1)) : undefined;\r\n            var val;\r\n            switch (p4) {\r\n                case 's':\r\n                    val = arr[i];\r\n                    break;\r\n                case 'c':\r\n                    val = arr[i][0];\r\n                    break;\r\n                case 'f':\r\n                    val = parseFloat(arr[i]).toFixed(exp);\r\n                    break;\r\n                case 'p':\r\n                    val = parseFloat(arr[i]).toPrecision(exp);\r\n                    break;\r\n                case 'e':\r\n                    val = parseFloat(arr[i]).toExponential(exp);\r\n                    break;\r\n                case 'x':\r\n                    val = parseInt(arr[i]).toString(base ? base : 16);\r\n                    break;\r\n                case 'd':\r\n                    val = parseFloat(parseInt(arr[i], base ? base : 10).toPrecision(exp)).toFixed(0);\r\n                    break;\r\n            }\r\n            val = typeof val === 'object' ? JSON.stringify(val) : (+val).toString(base);\r\n            var size = parseInt(p1); /* padding size */\r\n            var ch = p1 && (p1[0] + '') === '0' ? '0' : ' '; /* isnull? */\r\n            while (val.length < size)\r\n                val = p0 !== undefined ? val + ch : ch + val; /* isminus? */\r\n            return val;\r\n        }\r\n        var regex = /%(-)?(0?[0-9]+)?([.][0-9]+)?([#][0-9]+)?([scfpexd%])/g;\r\n        return str.replace(regex, callback);\r\n    };\r\n    /**\r\n     *\r\n     * @param append The new string to append.\r\n     * @param args Argumets values to be formated.\r\n     */\r\n    Formatter.prototype.format = function (append) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        this.buffer += Formatter.form(append, args);\r\n    };\r\n    /**\r\n     * Returns the Formatter string value.\r\n     */\r\n    Formatter.prototype.toString = function () {\r\n        return this.buffer;\r\n    };\r\n    return Formatter;\r\n}());\r\nexports.default = Formatter;\r\n//# sourceMappingURL=Formatter.js.map"]},"metadata":{},"sourceType":"script"}