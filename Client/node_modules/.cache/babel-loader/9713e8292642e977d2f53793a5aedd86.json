{"ast":null,"code":"\"use strict\";\n/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n/**\r\n * <p>This class contains utility methods for performing mathematical operations over\r\n * the Galois Fields. Operations use a given primitive polynomial in calculations.</p>\r\n *\r\n * <p>Throughout this package, elements of the GF are represented as an {@code int}\r\n * for convenience and speed (but at the cost of memory).\r\n * </p>\r\n *\r\n * @author Sean Owen\r\n * @author David Olivier\r\n */\n\n\nvar AbstractGenericGF =\n/** @class */\nfunction () {\n  function AbstractGenericGF() {}\n  /**\r\n   * @return 2 to the power of a in GF(size)\r\n   */\n\n\n  AbstractGenericGF.prototype.exp = function (a) {\n    return this.expTable[a];\n  };\n  /**\r\n   * @return base 2 log of a in GF(size)\r\n   */\n\n\n  AbstractGenericGF.prototype.log = function (a\n  /*int*/\n  ) {\n    if (a === 0) {\n      throw new IllegalArgumentException_1.default();\n    }\n\n    return this.logTable[a];\n  };\n  /**\r\n   * Implements both addition and subtraction -- they are the same in GF(size).\r\n   *\r\n   * @return sum/difference of a and b\r\n   */\n\n\n  AbstractGenericGF.addOrSubtract = function (a\n  /*int*/\n  , b\n  /*int*/\n  ) {\n    return a ^ b;\n  };\n\n  return AbstractGenericGF;\n}();\n\nexports.default = AbstractGenericGF;","map":{"version":3,"sources":["../../../../src/core/common/reedsolomon/AbstractGenericGF.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;;AAOH,IAAA,0BAAA,GAAA,OAAA,CAAA,gCAAA,CAAA;AAGA;;;;;;;;;;AAUG;;;AACH,IAAA,iBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,iBAAA,GAAA,CAyCC;AA5BC;;AAEG;;;AACI,EAAA,iBAAA,CAAA,SAAA,CAAA,GAAA,GAAP,UAAW,CAAX,EAAoB;AAClB,WAAO,KAAK,QAAL,CAAc,CAAd,CAAP;AACD,GAFM;AAIP;;AAEG;;;AACI,EAAA,iBAAA,CAAA,SAAA,CAAA,GAAA,GAAP,UAAW;AAAU;AAArB,IAA4B;AAC1B,QAAI,CAAC,KAAK,CAAV,EAAa;AACX,YAAM,IAAI,0BAAA,CAAA,OAAJ,EAAN;AACD;;AACD,WAAO,KAAK,QAAL,CAAc,CAAd,CAAP;AACD,GALM;AAOP;;;;AAIG;;;AACW,EAAA,iBAAA,CAAA,aAAA,GAAd,UACE;AAAU;AADZ,IAEE;AAAU;AAFZ,IAEmB;AAEjB,WAAO,CAAC,GAAG,CAAX;AACD,GALa;;AAMhB,SAAA,iBAAA;AAAC,CAzCD,EAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\n/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\r\n/**\r\n * <p>This class contains utility methods for performing mathematical operations over\r\n * the Galois Fields. Operations use a given primitive polynomial in calculations.</p>\r\n *\r\n * <p>Throughout this package, elements of the GF are represented as an {@code int}\r\n * for convenience and speed (but at the cost of memory).\r\n * </p>\r\n *\r\n * @author Sean Owen\r\n * @author David Olivier\r\n */\r\nvar AbstractGenericGF = /** @class */ (function () {\r\n    function AbstractGenericGF() {\r\n    }\r\n    /**\r\n     * @return 2 to the power of a in GF(size)\r\n     */\r\n    AbstractGenericGF.prototype.exp = function (a) {\r\n        return this.expTable[a];\r\n    };\r\n    /**\r\n     * @return base 2 log of a in GF(size)\r\n     */\r\n    AbstractGenericGF.prototype.log = function (a /*int*/) {\r\n        if (a === 0) {\r\n            throw new IllegalArgumentException_1.default();\r\n        }\r\n        return this.logTable[a];\r\n    };\r\n    /**\r\n     * Implements both addition and subtraction -- they are the same in GF(size).\r\n     *\r\n     * @return sum/difference of a and b\r\n     */\r\n    AbstractGenericGF.addOrSubtract = function (a /*int*/, b /*int*/) {\r\n        return a ^ b;\r\n    };\r\n    return AbstractGenericGF;\r\n}());\r\nexports.default = AbstractGenericGF;\r\n//# sourceMappingURL=AbstractGenericGF.js.map"]},"metadata":{},"sourceType":"script"}