{"ast":null,"code":"\"use strict\";\n/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.common {*/\n\n/*import java.util.List;*/\n\n/**\r\n * <p>Encapsulates the result of decoding a matrix of bits. This typically\r\n * applies to 2D barcode formats. For now it contains the raw bytes obtained,\r\n * as well as a String interpretation of those bytes, if applicable.</p>\r\n *\r\n * @author Sean Owen\r\n */\n\nvar DecoderResult =\n/** @class */\nfunction () {\n  // public constructor(rawBytes: Uint8Array,\n  //                      text: string,\n  //                      List<Uint8Array> byteSegments,\n  //                      String ecLevel) {\n  //   this(rawBytes, text, byteSegments, ecLevel, -1, -1)\n  // }\n  function DecoderResult(rawBytes, text, byteSegments, ecLevel, structuredAppendSequenceNumber, structuredAppendParity) {\n    if (structuredAppendSequenceNumber === void 0) {\n      structuredAppendSequenceNumber = -1;\n    }\n\n    if (structuredAppendParity === void 0) {\n      structuredAppendParity = -1;\n    }\n\n    this.rawBytes = rawBytes;\n    this.text = text;\n    this.byteSegments = byteSegments;\n    this.ecLevel = ecLevel;\n    this.structuredAppendSequenceNumber = structuredAppendSequenceNumber;\n    this.structuredAppendParity = structuredAppendParity;\n    this.numBits = rawBytes === undefined || rawBytes === null ? 0 : 8 * rawBytes.length;\n  }\n  /**\r\n   * @return raw bytes representing the result, or {@code null} if not applicable\r\n   */\n\n\n  DecoderResult.prototype.getRawBytes = function () {\n    return this.rawBytes;\n  };\n  /**\r\n   * @return how many bits of {@link #getRawBytes()} are valid; typically 8 times its length\r\n   * @since 3.3.0\r\n   */\n\n\n  DecoderResult.prototype.getNumBits = function () {\n    return this.numBits;\n  };\n  /**\r\n   * @param numBits overrides the number of bits that are valid in {@link #getRawBytes()}\r\n   * @since 3.3.0\r\n   */\n\n\n  DecoderResult.prototype.setNumBits = function (numBits\n  /*int*/\n  ) {\n    this.numBits = numBits;\n  };\n  /**\r\n   * @return text representation of the result\r\n   */\n\n\n  DecoderResult.prototype.getText = function () {\n    return this.text;\n  };\n  /**\r\n   * @return list of byte segments in the result, or {@code null} if not applicable\r\n   */\n\n\n  DecoderResult.prototype.getByteSegments = function () {\n    return this.byteSegments;\n  };\n  /**\r\n   * @return name of error correction level used, or {@code null} if not applicable\r\n   */\n\n\n  DecoderResult.prototype.getECLevel = function () {\n    return this.ecLevel;\n  };\n  /**\r\n   * @return number of errors corrected, or {@code null} if not applicable\r\n   */\n\n\n  DecoderResult.prototype.getErrorsCorrected = function () {\n    return this.errorsCorrected;\n  };\n\n  DecoderResult.prototype.setErrorsCorrected = function (errorsCorrected\n  /*Integer*/\n  ) {\n    this.errorsCorrected = errorsCorrected;\n  };\n  /**\r\n   * @return number of erasures corrected, or {@code null} if not applicable\r\n   */\n\n\n  DecoderResult.prototype.getErasures = function () {\n    return this.erasures;\n  };\n\n  DecoderResult.prototype.setErasures = function (erasures\n  /*Integer*/\n  ) {\n    this.erasures = erasures;\n  };\n  /**\r\n   * @return arbitrary additional metadata\r\n   */\n\n\n  DecoderResult.prototype.getOther = function () {\n    return this.other;\n  };\n\n  DecoderResult.prototype.setOther = function (other) {\n    this.other = other;\n  };\n\n  DecoderResult.prototype.hasStructuredAppend = function () {\n    return this.structuredAppendParity >= 0 && this.structuredAppendSequenceNumber >= 0;\n  };\n\n  DecoderResult.prototype.getStructuredAppendParity = function () {\n    return this.structuredAppendParity;\n  };\n\n  DecoderResult.prototype.getStructuredAppendSequenceNumber = function () {\n    return this.structuredAppendSequenceNumber;\n  };\n\n  return DecoderResult;\n}();\n\nexports.default = DecoderResult;","map":{"version":3,"sources":["../../../src/core/common/DecoderResult.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\n/*\r\n * Copyright 2007 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*namespace com.google.zxing.common {*/\r\n/*import java.util.List;*/\r\n/**\r\n * <p>Encapsulates the result of decoding a matrix of bits. This typically\r\n * applies to 2D barcode formats. For now it contains the raw bytes obtained,\r\n * as well as a String interpretation of those bytes, if applicable.</p>\r\n *\r\n * @author Sean Owen\r\n */\r\nvar DecoderResult = /** @class */ (function () {\r\n    // public constructor(rawBytes: Uint8Array,\r\n    //                      text: string,\r\n    //                      List<Uint8Array> byteSegments,\r\n    //                      String ecLevel) {\r\n    //   this(rawBytes, text, byteSegments, ecLevel, -1, -1)\r\n    // }\r\n    function DecoderResult(rawBytes, text, byteSegments, ecLevel, structuredAppendSequenceNumber, structuredAppendParity) {\r\n        if (structuredAppendSequenceNumber === void 0) { structuredAppendSequenceNumber = -1; }\r\n        if (structuredAppendParity === void 0) { structuredAppendParity = -1; }\r\n        this.rawBytes = rawBytes;\r\n        this.text = text;\r\n        this.byteSegments = byteSegments;\r\n        this.ecLevel = ecLevel;\r\n        this.structuredAppendSequenceNumber = structuredAppendSequenceNumber;\r\n        this.structuredAppendParity = structuredAppendParity;\r\n        this.numBits = (rawBytes === undefined || rawBytes === null) ? 0 : 8 * rawBytes.length;\r\n    }\r\n    /**\r\n     * @return raw bytes representing the result, or {@code null} if not applicable\r\n     */\r\n    DecoderResult.prototype.getRawBytes = function () {\r\n        return this.rawBytes;\r\n    };\r\n    /**\r\n     * @return how many bits of {@link #getRawBytes()} are valid; typically 8 times its length\r\n     * @since 3.3.0\r\n     */\r\n    DecoderResult.prototype.getNumBits = function () {\r\n        return this.numBits;\r\n    };\r\n    /**\r\n     * @param numBits overrides the number of bits that are valid in {@link #getRawBytes()}\r\n     * @since 3.3.0\r\n     */\r\n    DecoderResult.prototype.setNumBits = function (numBits /*int*/) {\r\n        this.numBits = numBits;\r\n    };\r\n    /**\r\n     * @return text representation of the result\r\n     */\r\n    DecoderResult.prototype.getText = function () {\r\n        return this.text;\r\n    };\r\n    /**\r\n     * @return list of byte segments in the result, or {@code null} if not applicable\r\n     */\r\n    DecoderResult.prototype.getByteSegments = function () {\r\n        return this.byteSegments;\r\n    };\r\n    /**\r\n     * @return name of error correction level used, or {@code null} if not applicable\r\n     */\r\n    DecoderResult.prototype.getECLevel = function () {\r\n        return this.ecLevel;\r\n    };\r\n    /**\r\n     * @return number of errors corrected, or {@code null} if not applicable\r\n     */\r\n    DecoderResult.prototype.getErrorsCorrected = function () {\r\n        return this.errorsCorrected;\r\n    };\r\n    DecoderResult.prototype.setErrorsCorrected = function (errorsCorrected /*Integer*/) {\r\n        this.errorsCorrected = errorsCorrected;\r\n    };\r\n    /**\r\n     * @return number of erasures corrected, or {@code null} if not applicable\r\n     */\r\n    DecoderResult.prototype.getErasures = function () {\r\n        return this.erasures;\r\n    };\r\n    DecoderResult.prototype.setErasures = function (erasures /*Integer*/) {\r\n        this.erasures = erasures;\r\n    };\r\n    /**\r\n     * @return arbitrary additional metadata\r\n     */\r\n    DecoderResult.prototype.getOther = function () {\r\n        return this.other;\r\n    };\r\n    DecoderResult.prototype.setOther = function (other) {\r\n        this.other = other;\r\n    };\r\n    DecoderResult.prototype.hasStructuredAppend = function () {\r\n        return this.structuredAppendParity >= 0 && this.structuredAppendSequenceNumber >= 0;\r\n    };\r\n    DecoderResult.prototype.getStructuredAppendParity = function () {\r\n        return this.structuredAppendParity;\r\n    };\r\n    DecoderResult.prototype.getStructuredAppendSequenceNumber = function () {\r\n        return this.structuredAppendSequenceNumber;\r\n    };\r\n    return DecoderResult;\r\n}());\r\nexports.default = DecoderResult;\r\n//# sourceMappingURL=DecoderResult.js.map"]},"metadata":{},"sourceType":"script"}