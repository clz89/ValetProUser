{"ast":null,"code":"\"use strict\";\n/*\r\n * Copyright 2009 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar DecodeHintType_1 = require(\"./DecodeHintType\");\n\nvar BarcodeFormat_1 = require(\"./BarcodeFormat\");\n\nvar QRCodeReader_1 = require(\"./qrcode/QRCodeReader\");\n\nvar AztecReader_1 = require(\"./aztec/AztecReader\");\n\nvar MultiFormatOneDReader_1 = require(\"./oned/MultiFormatOneDReader\");\n\nvar DataMatrixReader_1 = require(\"./datamatrix/DataMatrixReader\");\n\nvar NotFoundException_1 = require(\"./NotFoundException\");\n\nvar PDF417Reader_1 = require(\"./pdf417/PDF417Reader\");\n\nvar ReaderException_1 = require(\"./ReaderException\");\n/*namespace com.google.zxing {*/\n\n/**\r\n * MultiFormatReader is a convenience class and the main entry point into the library for most uses.\r\n * By default it attempts to decode all barcode formats that the library supports. Optionally, you\r\n * can provide a hints object to request different behavior, for example only decoding QR codes.\r\n *\r\n * @author Sean Owen\r\n * @author dswitkin@google.com (Daniel Switkin)\r\n */\n\n\nvar MultiFormatReader =\n/** @class */\nfunction () {\n  function MultiFormatReader() {}\n  /**\r\n   * This version of decode honors the intent of Reader.decode(BinaryBitmap) in that it\r\n   * passes null as a hint to the decoders. However, that makes it inefficient to call repeatedly.\r\n   * Use setHints() followed by decodeWithState() for continuous scan applications.\r\n   *\r\n   * @param image The pixel data to decode\r\n   * @return The contents of the image\r\n   *\r\n   * @throws NotFoundException Any errors which occurred\r\n   */\n\n  /*@Override*/\n  // public decode(image: BinaryBitmap): Result {\n  //   setHints(null)\n  //   return decodeInternal(image)\n  // }\n\n  /**\r\n   * Decode an image using the hints provided. Does not honor existing state.\r\n   *\r\n   * @param image The pixel data to decode\r\n   * @param hints The hints to use, clearing the previous state.\r\n   * @return The contents of the image\r\n   *\r\n   * @throws NotFoundException Any errors which occurred\r\n   */\n\n  /*@Override*/\n\n\n  MultiFormatReader.prototype.decode = function (image, hints) {\n    this.setHints(hints);\n    return this.decodeInternal(image);\n  };\n  /**\r\n   * Decode an image using the state set up by calling setHints() previously. Continuous scan\r\n   * clients will get a <b>large</b> speed increase by using this instead of decode().\r\n   *\r\n   * @param image The pixel data to decode\r\n   * @return The contents of the image\r\n   *\r\n   * @throws NotFoundException Any errors which occurred\r\n   */\n\n\n  MultiFormatReader.prototype.decodeWithState = function (image) {\n    // Make sure to set up the default state so we don't crash\n    if (this.readers === null || this.readers === undefined) {\n      this.setHints(null);\n    }\n\n    return this.decodeInternal(image);\n  };\n  /**\r\n   * This method adds state to the MultiFormatReader. By setting the hints once, subsequent calls\r\n   * to decodeWithState(image) can reuse the same set of readers without reallocating memory. This\r\n   * is important for performance in continuous scan clients.\r\n   *\r\n   * @param hints The set of hints to use for subsequent calls to decode(image)\r\n   */\n\n\n  MultiFormatReader.prototype.setHints = function (hints) {\n    this.hints = hints;\n    var tryHarder = hints !== null && hints !== undefined && undefined !== hints.get(DecodeHintType_1.default.TRY_HARDER);\n    /*@SuppressWarnings(\"unchecked\")*/\n\n    var formats = hints === null || hints === undefined ? null : hints.get(DecodeHintType_1.default.POSSIBLE_FORMATS);\n    var readers = new Array();\n\n    if (formats !== null && formats !== undefined) {\n      var addOneDReader = formats.some(function (f) {\n        return f === BarcodeFormat_1.default.UPC_A || f === BarcodeFormat_1.default.UPC_E || f === BarcodeFormat_1.default.EAN_13 || f === BarcodeFormat_1.default.EAN_8 || f === BarcodeFormat_1.default.CODABAR || f === BarcodeFormat_1.default.CODE_39 || f === BarcodeFormat_1.default.CODE_93 || f === BarcodeFormat_1.default.CODE_128 || f === BarcodeFormat_1.default.ITF || f === BarcodeFormat_1.default.RSS_14 || f === BarcodeFormat_1.default.RSS_EXPANDED;\n      }); // Put 1D readers upfront in \"normal\" mode\n      // TYPESCRIPTPORT: TODO: uncomment below as they are ported\n\n      if (addOneDReader && !tryHarder) {\n        readers.push(new MultiFormatOneDReader_1.default(hints));\n      }\n\n      if (formats.includes(BarcodeFormat_1.default.QR_CODE)) {\n        readers.push(new QRCodeReader_1.default());\n      }\n\n      if (formats.includes(BarcodeFormat_1.default.DATA_MATRIX)) {\n        readers.push(new DataMatrixReader_1.default());\n      }\n\n      if (formats.includes(BarcodeFormat_1.default.AZTEC)) {\n        readers.push(new AztecReader_1.default());\n      }\n\n      if (formats.includes(BarcodeFormat_1.default.PDF_417)) {\n        readers.push(new PDF417Reader_1.default());\n      } // if (formats.includes(BarcodeFormat.MAXICODE)) {\n      //    readers.push(new MaxiCodeReader())\n      // }\n      // At end in \"try harder\" mode\n\n\n      if (addOneDReader && tryHarder) {\n        readers.push(new MultiFormatOneDReader_1.default(hints));\n      }\n    }\n\n    if (readers.length === 0) {\n      if (!tryHarder) {\n        readers.push(new MultiFormatOneDReader_1.default(hints));\n      }\n\n      readers.push(new QRCodeReader_1.default());\n      readers.push(new DataMatrixReader_1.default());\n      readers.push(new AztecReader_1.default());\n      readers.push(new PDF417Reader_1.default()); // readers.push(new MaxiCodeReader())\n\n      if (tryHarder) {\n        readers.push(new MultiFormatOneDReader_1.default(hints));\n      }\n    }\n\n    this.readers = readers; // .toArray(new Reader[readers.size()])\n  };\n  /*@Override*/\n\n\n  MultiFormatReader.prototype.reset = function () {\n    var e_1, _a;\n\n    if (this.readers !== null) {\n      try {\n        for (var _b = __values(this.readers), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var reader = _c.value;\n          reader.reset();\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n  };\n  /**\r\n   * @throws NotFoundException\r\n   */\n\n\n  MultiFormatReader.prototype.decodeInternal = function (image) {\n    var e_2, _a;\n\n    if (this.readers === null) {\n      throw new ReaderException_1.default('No readers where selected, nothing can be read.');\n    }\n\n    try {\n      for (var _b = __values(this.readers), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var reader = _c.value; // Trying to decode with ${reader} reader.\n\n        try {\n          return reader.decode(image, this.hints);\n        } catch (ex) {\n          if (ex instanceof ReaderException_1.default) {\n            continue;\n          } // Bad Exception.\n\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    throw new NotFoundException_1.default('No MultiFormat Readers were able to detect the code.');\n  };\n\n  return MultiFormatReader;\n}();\n\nexports.default = MultiFormatReader;","map":{"version":3,"sources":["../../src/core/MultiFormatReader.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;;;;;;;;;;;;;;;;;AAEH,IAAA,gBAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AAIA,IAAA,eAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,IAAA,cAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AAEA,IAAA,aAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AACA,IAAA,uBAAA,GAAA,OAAA,CAAA,8BAAA,CAAA;;AACA,IAAA,kBAAA,GAAA,OAAA,CAAA,+BAAA,CAAA;;AACA,IAAA,mBAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AACA,IAAA,cAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,IAAA,iBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;AAEA;;AAEA;;;;;;;AAOG;;;AACH,IAAA,iBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,iBAAA,GAAA,CAkKC;AA7JG;;;;;;;;;AASG;;AACH;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AAQG;;AACH;;;AACO,EAAA,iBAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc,KAAd,EAAmC,KAAnC,EAAmE;AAC/D,SAAK,QAAL,CAAc,KAAd;AACA,WAAO,KAAK,cAAL,CAAoB,KAApB,CAAP;AACH,GAHM;AAKP;;;;;;;;AAQG;;;AACI,EAAA,iBAAA,CAAA,SAAA,CAAA,eAAA,GAAP,UAAuB,KAAvB,EAA0C;AACtC;AACA,QAAI,KAAK,OAAL,KAAiB,IAAjB,IAAyB,KAAK,OAAL,KAAiB,SAA9C,EAAyD;AACrD,WAAK,QAAL,CAAc,IAAd;AACH;;AACD,WAAO,KAAK,cAAL,CAAoB,KAApB,CAAP;AACH,GANM;AAQP;;;;;;AAMG;;;AACI,EAAA,iBAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,KAAhB,EAAuD;AACnD,SAAK,KAAL,GAAa,KAAb;AAEA,QAAM,SAAS,GAAY,KAAK,KAAK,IAAV,IAAkB,KAAK,KAAK,SAA5B,IAAyC,SAAS,KAAK,KAAK,CAAC,GAAN,CAAU,gBAAA,CAAA,OAAA,CAAe,UAAzB,CAAlF;AACA;;AACA,QAAM,OAAO,GAAG,KAAK,KAAK,IAAV,IAAkB,KAAK,KAAK,SAA5B,GAAwC,IAAxC,GAAgE,KAAK,CAAC,GAAN,CAAU,gBAAA,CAAA,OAAA,CAAe,gBAAzB,CAAhF;AACA,QAAM,OAAO,GAAG,IAAI,KAAJ,EAAhB;;AACA,QAAI,OAAO,KAAK,IAAZ,IAAoB,OAAO,KAAK,SAApC,EAA+C;AAC3C,UAAM,aAAa,GAAY,OAAO,CAAC,IAAR,CAAa,UAAA,CAAA,EAAC;AACzC,eAAA,CAAC,KAAK,eAAA,CAAA,OAAA,CAAc,KAApB,IACA,CAAC,KAAK,eAAA,CAAA,OAAA,CAAc,KADpB,IAEA,CAAC,KAAK,eAAA,CAAA,OAAA,CAAc,MAFpB,IAGA,CAAC,KAAK,eAAA,CAAA,OAAA,CAAc,KAHpB,IAIA,CAAC,KAAK,eAAA,CAAA,OAAA,CAAc,OAJpB,IAKA,CAAC,KAAK,eAAA,CAAA,OAAA,CAAc,OALpB,IAMA,CAAC,KAAK,eAAA,CAAA,OAAA,CAAc,OANpB,IAOA,CAAC,KAAK,eAAA,CAAA,OAAA,CAAc,QAPpB,IAQA,CAAC,KAAK,eAAA,CAAA,OAAA,CAAc,GARpB,IASA,CAAC,KAAK,eAAA,CAAA,OAAA,CAAc,MATpB,IAUA,CAAC,KAAK,eAAA,CAAA,OAAA,CAAc,YAVpB;AAUgC,OAXL,CAA/B,CAD2C,CAc3C;AAEA;;AAEA,UAAI,aAAa,IAAI,CAAC,SAAtB,EAAiC;AAC9B,QAAA,OAAO,CAAC,IAAR,CAAa,IAAI,uBAAA,CAAA,OAAJ,CAA0B,KAA1B,CAAb;AACF;;AACD,UAAI,OAAO,CAAC,QAAR,CAAiB,eAAA,CAAA,OAAA,CAAc,OAA/B,CAAJ,EAA6C;AACzC,QAAA,OAAO,CAAC,IAAR,CAAa,IAAI,cAAA,CAAA,OAAJ,EAAb;AACH;;AACD,UAAI,OAAO,CAAC,QAAR,CAAiB,eAAA,CAAA,OAAA,CAAc,WAA/B,CAAJ,EAAiD;AAC/C,QAAA,OAAO,CAAC,IAAR,CAAa,IAAI,kBAAA,CAAA,OAAJ,EAAb;AACD;;AACD,UAAI,OAAO,CAAC,QAAR,CAAiB,eAAA,CAAA,OAAA,CAAc,KAA/B,CAAJ,EAA2C;AACzC,QAAA,OAAO,CAAC,IAAR,CAAa,IAAI,aAAA,CAAA,OAAJ,EAAb;AACD;;AACD,UAAI,OAAO,CAAC,QAAR,CAAiB,eAAA,CAAA,OAAA,CAAc,OAA/B,CAAJ,EAA6C;AAC1C,QAAA,OAAO,CAAC,IAAR,CAAa,IAAI,cAAA,CAAA,OAAJ,EAAb;AACF,OAhC0C,CAiC3C;AACA;AACA;AACA;;;AACA,UAAI,aAAa,IAAI,SAArB,EAAgC;AAC9B,QAAA,OAAO,CAAC,IAAR,CAAa,IAAI,uBAAA,CAAA,OAAJ,CAA0B,KAA1B,CAAb;AACD;AACJ;;AACD,QAAI,OAAO,CAAC,MAAR,KAAmB,CAAvB,EAA0B;AACtB,UAAI,CAAC,SAAL,EAAgB;AACd,QAAA,OAAO,CAAC,IAAR,CAAa,IAAI,uBAAA,CAAA,OAAJ,CAA0B,KAA1B,CAAb;AACD;;AAED,MAAA,OAAO,CAAC,IAAR,CAAa,IAAI,cAAA,CAAA,OAAJ,EAAb;AACA,MAAA,OAAO,CAAC,IAAR,CAAa,IAAI,kBAAA,CAAA,OAAJ,EAAb;AACA,MAAA,OAAO,CAAC,IAAR,CAAa,IAAI,aAAA,CAAA,OAAJ,EAAb;AACA,MAAA,OAAO,CAAC,IAAR,CAAa,IAAI,cAAA,CAAA,OAAJ,EAAb,EARsB,CAStB;;AAEA,UAAI,SAAJ,EAAe;AACZ,QAAA,OAAO,CAAC,IAAR,CAAa,IAAI,uBAAA,CAAA,OAAJ,CAA0B,KAA1B,CAAb;AACF;AACJ;;AACD,SAAK,OAAL,GAAe,OAAf,CA/DmD,CA+D3B;AAC3B,GAhEM;AAkEP;;;AACO,EAAA,iBAAA,CAAA,SAAA,CAAA,KAAA,GAAP,YAAA;;;AACI,QAAI,KAAK,OAAL,KAAiB,IAArB,EAA2B;;AACvB,aAAqB,IAAA,EAAA,GAAA,QAAA,CAAA,KAAK,OAAL,CAAA,EAAY,EAAA,GAAA,EAAA,CAAA,IAAA,EAAjC,EAAiC,CAAA,EAAA,CAAA,IAAjC,EAAiC,EAAA,GAAA,EAAA,CAAA,IAAA,EAAjC,EAAmC;AAA9B,cAAM,MAAM,GAAA,EAAA,CAAA,KAAZ;AACD,UAAA,MAAM,CAAC,KAAP;AACH;;;;;;;;;;;;AACJ;AACJ,GANM;AAQP;;AAEG;;;AACK,EAAA,iBAAA,CAAA,SAAA,CAAA,cAAA,GAAR,UAAuB,KAAvB,EAA0C;;;AAEtC,QAAI,KAAK,OAAL,KAAiB,IAArB,EAA2B;AACvB,YAAM,IAAI,iBAAA,CAAA,OAAJ,CAAoB,iDAApB,CAAN;AACH;;;AAED,WAAqB,IAAA,EAAA,GAAA,QAAA,CAAA,KAAK,OAAL,CAAA,EAAY,EAAA,GAAA,EAAA,CAAA,IAAA,EAAjC,EAAiC,CAAA,EAAA,CAAA,IAAjC,EAAiC,EAAA,GAAA,EAAA,CAAA,IAAA,EAAjC,EAAmC;AAA9B,YAAM,MAAM,GAAA,EAAA,CAAA,KAAZ,CAA8B,CAE/B;;AAEA,YAAI;AACA,iBAAO,MAAM,CAAC,MAAP,CAAc,KAAd,EAAqB,KAAK,KAA1B,CAAP;AACH,SAFD,CAEE,OAAO,EAAP,EAAW;AACT,cAAI,EAAE,YAAY,iBAAA,CAAA,OAAlB,EAAmC;AAC/B;AACH,WAHQ,CAKT;;AACH;AACJ;;;;;;;;;;;;;AAED,UAAM,IAAI,mBAAA,CAAA,OAAJ,CAAsB,sDAAtB,CAAN;AACH,GAtBO;;AAwBZ,SAAA,iBAAA;AAAC,CAlKD,EAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\n/*\r\n * Copyright 2009 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __values = (this && this.__values) || function (o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar DecodeHintType_1 = require(\"./DecodeHintType\");\r\nvar BarcodeFormat_1 = require(\"./BarcodeFormat\");\r\nvar QRCodeReader_1 = require(\"./qrcode/QRCodeReader\");\r\nvar AztecReader_1 = require(\"./aztec/AztecReader\");\r\nvar MultiFormatOneDReader_1 = require(\"./oned/MultiFormatOneDReader\");\r\nvar DataMatrixReader_1 = require(\"./datamatrix/DataMatrixReader\");\r\nvar NotFoundException_1 = require(\"./NotFoundException\");\r\nvar PDF417Reader_1 = require(\"./pdf417/PDF417Reader\");\r\nvar ReaderException_1 = require(\"./ReaderException\");\r\n/*namespace com.google.zxing {*/\r\n/**\r\n * MultiFormatReader is a convenience class and the main entry point into the library for most uses.\r\n * By default it attempts to decode all barcode formats that the library supports. Optionally, you\r\n * can provide a hints object to request different behavior, for example only decoding QR codes.\r\n *\r\n * @author Sean Owen\r\n * @author dswitkin@google.com (Daniel Switkin)\r\n */\r\nvar MultiFormatReader = /** @class */ (function () {\r\n    function MultiFormatReader() {\r\n    }\r\n    /**\r\n     * This version of decode honors the intent of Reader.decode(BinaryBitmap) in that it\r\n     * passes null as a hint to the decoders. However, that makes it inefficient to call repeatedly.\r\n     * Use setHints() followed by decodeWithState() for continuous scan applications.\r\n     *\r\n     * @param image The pixel data to decode\r\n     * @return The contents of the image\r\n     *\r\n     * @throws NotFoundException Any errors which occurred\r\n     */\r\n    /*@Override*/\r\n    // public decode(image: BinaryBitmap): Result {\r\n    //   setHints(null)\r\n    //   return decodeInternal(image)\r\n    // }\r\n    /**\r\n     * Decode an image using the hints provided. Does not honor existing state.\r\n     *\r\n     * @param image The pixel data to decode\r\n     * @param hints The hints to use, clearing the previous state.\r\n     * @return The contents of the image\r\n     *\r\n     * @throws NotFoundException Any errors which occurred\r\n     */\r\n    /*@Override*/\r\n    MultiFormatReader.prototype.decode = function (image, hints) {\r\n        this.setHints(hints);\r\n        return this.decodeInternal(image);\r\n    };\r\n    /**\r\n     * Decode an image using the state set up by calling setHints() previously. Continuous scan\r\n     * clients will get a <b>large</b> speed increase by using this instead of decode().\r\n     *\r\n     * @param image The pixel data to decode\r\n     * @return The contents of the image\r\n     *\r\n     * @throws NotFoundException Any errors which occurred\r\n     */\r\n    MultiFormatReader.prototype.decodeWithState = function (image) {\r\n        // Make sure to set up the default state so we don't crash\r\n        if (this.readers === null || this.readers === undefined) {\r\n            this.setHints(null);\r\n        }\r\n        return this.decodeInternal(image);\r\n    };\r\n    /**\r\n     * This method adds state to the MultiFormatReader. By setting the hints once, subsequent calls\r\n     * to decodeWithState(image) can reuse the same set of readers without reallocating memory. This\r\n     * is important for performance in continuous scan clients.\r\n     *\r\n     * @param hints The set of hints to use for subsequent calls to decode(image)\r\n     */\r\n    MultiFormatReader.prototype.setHints = function (hints) {\r\n        this.hints = hints;\r\n        var tryHarder = hints !== null && hints !== undefined && undefined !== hints.get(DecodeHintType_1.default.TRY_HARDER);\r\n        /*@SuppressWarnings(\"unchecked\")*/\r\n        var formats = hints === null || hints === undefined ? null : hints.get(DecodeHintType_1.default.POSSIBLE_FORMATS);\r\n        var readers = new Array();\r\n        if (formats !== null && formats !== undefined) {\r\n            var addOneDReader = formats.some(function (f) {\r\n                return f === BarcodeFormat_1.default.UPC_A ||\r\n                    f === BarcodeFormat_1.default.UPC_E ||\r\n                    f === BarcodeFormat_1.default.EAN_13 ||\r\n                    f === BarcodeFormat_1.default.EAN_8 ||\r\n                    f === BarcodeFormat_1.default.CODABAR ||\r\n                    f === BarcodeFormat_1.default.CODE_39 ||\r\n                    f === BarcodeFormat_1.default.CODE_93 ||\r\n                    f === BarcodeFormat_1.default.CODE_128 ||\r\n                    f === BarcodeFormat_1.default.ITF ||\r\n                    f === BarcodeFormat_1.default.RSS_14 ||\r\n                    f === BarcodeFormat_1.default.RSS_EXPANDED;\r\n            });\r\n            // Put 1D readers upfront in \"normal\" mode\r\n            // TYPESCRIPTPORT: TODO: uncomment below as they are ported\r\n            if (addOneDReader && !tryHarder) {\r\n                readers.push(new MultiFormatOneDReader_1.default(hints));\r\n            }\r\n            if (formats.includes(BarcodeFormat_1.default.QR_CODE)) {\r\n                readers.push(new QRCodeReader_1.default());\r\n            }\r\n            if (formats.includes(BarcodeFormat_1.default.DATA_MATRIX)) {\r\n                readers.push(new DataMatrixReader_1.default());\r\n            }\r\n            if (formats.includes(BarcodeFormat_1.default.AZTEC)) {\r\n                readers.push(new AztecReader_1.default());\r\n            }\r\n            if (formats.includes(BarcodeFormat_1.default.PDF_417)) {\r\n                readers.push(new PDF417Reader_1.default());\r\n            }\r\n            // if (formats.includes(BarcodeFormat.MAXICODE)) {\r\n            //    readers.push(new MaxiCodeReader())\r\n            // }\r\n            // At end in \"try harder\" mode\r\n            if (addOneDReader && tryHarder) {\r\n                readers.push(new MultiFormatOneDReader_1.default(hints));\r\n            }\r\n        }\r\n        if (readers.length === 0) {\r\n            if (!tryHarder) {\r\n                readers.push(new MultiFormatOneDReader_1.default(hints));\r\n            }\r\n            readers.push(new QRCodeReader_1.default());\r\n            readers.push(new DataMatrixReader_1.default());\r\n            readers.push(new AztecReader_1.default());\r\n            readers.push(new PDF417Reader_1.default());\r\n            // readers.push(new MaxiCodeReader())\r\n            if (tryHarder) {\r\n                readers.push(new MultiFormatOneDReader_1.default(hints));\r\n            }\r\n        }\r\n        this.readers = readers; // .toArray(new Reader[readers.size()])\r\n    };\r\n    /*@Override*/\r\n    MultiFormatReader.prototype.reset = function () {\r\n        var e_1, _a;\r\n        if (this.readers !== null) {\r\n            try {\r\n                for (var _b = __values(this.readers), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                    var reader = _c.value;\r\n                    reader.reset();\r\n                }\r\n            }\r\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n            finally {\r\n                try {\r\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n                }\r\n                finally { if (e_1) throw e_1.error; }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @throws NotFoundException\r\n     */\r\n    MultiFormatReader.prototype.decodeInternal = function (image) {\r\n        var e_2, _a;\r\n        if (this.readers === null) {\r\n            throw new ReaderException_1.default('No readers where selected, nothing can be read.');\r\n        }\r\n        try {\r\n            for (var _b = __values(this.readers), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var reader = _c.value;\r\n                // Trying to decode with ${reader} reader.\r\n                try {\r\n                    return reader.decode(image, this.hints);\r\n                }\r\n                catch (ex) {\r\n                    if (ex instanceof ReaderException_1.default) {\r\n                        continue;\r\n                    }\r\n                    // Bad Exception.\r\n                }\r\n            }\r\n        }\r\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_2) throw e_2.error; }\r\n        }\r\n        throw new NotFoundException_1.default('No MultiFormat Readers were able to detect the code.');\r\n    };\r\n    return MultiFormatReader;\r\n}());\r\nexports.default = MultiFormatReader;\r\n//# sourceMappingURL=MultiFormatReader.js.map"]},"metadata":{},"sourceType":"script"}