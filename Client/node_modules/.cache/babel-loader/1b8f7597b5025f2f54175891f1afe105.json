{"ast":null,"code":"\"use strict\";\n/*\r\n * Copyright 2008 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing {*/\n\n/**\r\n * Represents some type of metadata about the result of the decoding that the decoder\r\n * wishes to communicate back to the caller.\r\n *\r\n * @author Sean Owen\r\n */\n\nvar ResultMetadataType;\n\n(function (ResultMetadataType) {\n  /**\r\n   * Unspecified, application-specific metadata. Maps to an unspecified {@link Object}.\r\n   */\n  ResultMetadataType[ResultMetadataType[\"OTHER\"] = 0] = \"OTHER\";\n  /**\r\n   * Denotes the likely approximate orientation of the barcode in the image. This value\r\n   * is given as degrees rotated clockwise from the normal, upright orientation.\r\n   * For example a 1D barcode which was found by reading top-to-bottom would be\r\n   * said to have orientation \"90\". This key maps to an {@link Integer} whose\r\n   * value is in the range [0,360).\r\n   */\n\n  ResultMetadataType[ResultMetadataType[\"ORIENTATION\"] = 1] = \"ORIENTATION\";\n  /**\r\n   * <p>2D barcode formats typically encode text, but allow for a sort of 'byte mode'\r\n   * which is sometimes used to encode binary data. While {@link Result} makes available\r\n   * the complete raw bytes in the barcode for these formats, it does not offer the bytes\r\n   * from the byte segments alone.</p>\r\n   *\r\n   * <p>This maps to a {@link java.util.List} of byte arrays corresponding to the\r\n   * raw bytes in the byte segments in the barcode, in order.</p>\r\n   */\n\n  ResultMetadataType[ResultMetadataType[\"BYTE_SEGMENTS\"] = 2] = \"BYTE_SEGMENTS\";\n  /**\r\n   * Error correction level used, if applicable. The value type depends on the\r\n   * format, but is typically a String.\r\n   */\n\n  ResultMetadataType[ResultMetadataType[\"ERROR_CORRECTION_LEVEL\"] = 3] = \"ERROR_CORRECTION_LEVEL\";\n  /**\r\n   * For some periodicals, indicates the issue number as an {@link Integer}.\r\n   */\n\n  ResultMetadataType[ResultMetadataType[\"ISSUE_NUMBER\"] = 4] = \"ISSUE_NUMBER\";\n  /**\r\n   * For some products, indicates the suggested retail price in the barcode as a\r\n   * formatted {@link String}.\r\n   */\n\n  ResultMetadataType[ResultMetadataType[\"SUGGESTED_PRICE\"] = 5] = \"SUGGESTED_PRICE\";\n  /**\r\n   * For some products, the possible country of manufacture as a {@link String} denoting the\r\n   * ISO country code. Some map to multiple possible countries, like \"US/CA\".\r\n   */\n\n  ResultMetadataType[ResultMetadataType[\"POSSIBLE_COUNTRY\"] = 6] = \"POSSIBLE_COUNTRY\";\n  /**\r\n   * For some products, the extension text\r\n   */\n\n  ResultMetadataType[ResultMetadataType[\"UPC_EAN_EXTENSION\"] = 7] = \"UPC_EAN_EXTENSION\";\n  /**\r\n   * PDF417-specific metadata\r\n   */\n\n  ResultMetadataType[ResultMetadataType[\"PDF417_EXTRA_METADATA\"] = 8] = \"PDF417_EXTRA_METADATA\";\n  /**\r\n   * If the code format supports structured append and the current scanned code is part of one then the\r\n   * sequence number is given with it.\r\n   */\n\n  ResultMetadataType[ResultMetadataType[\"STRUCTURED_APPEND_SEQUENCE\"] = 9] = \"STRUCTURED_APPEND_SEQUENCE\";\n  /**\r\n   * If the code format supports structured append and the current scanned code is part of one then the\r\n   * parity is given with it.\r\n   */\n\n  ResultMetadataType[ResultMetadataType[\"STRUCTURED_APPEND_PARITY\"] = 10] = \"STRUCTURED_APPEND_PARITY\";\n})(ResultMetadataType || (ResultMetadataType = {}));\n\nexports.default = ResultMetadataType;","map":{"version":3,"sources":["../../src/core/ResultMetadataType.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;AAEH;;AAEA;;;;;AAKG;;AACH,IAAK,kBAAL;;AAAA,CAAA,UAAK,kBAAL,EAAuB;AAEnB;;AAEG;AACH,EAAA,kBAAA,CAAA,kBAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;AAEA;;;;;;AAMG;;AACH,EAAA,kBAAA,CAAA,kBAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAA;AAEA;;;;;;;;AAQG;;AACH,EAAA,kBAAA,CAAA,kBAAA,CAAA,eAAA,CAAA,GAAA,CAAA,CAAA,GAAA,eAAA;AAEA;;;AAGG;;AACH,EAAA,kBAAA,CAAA,kBAAA,CAAA,wBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,wBAAA;AAEA;;AAEG;;AACH,EAAA,kBAAA,CAAA,kBAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,cAAA;AAEA;;;AAGG;;AACH,EAAA,kBAAA,CAAA,kBAAA,CAAA,iBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,iBAAA;AAEA;;;AAGG;;AACH,EAAA,kBAAA,CAAA,kBAAA,CAAA,kBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,kBAAA;AAEA;;AAEG;;AACH,EAAA,kBAAA,CAAA,kBAAA,CAAA,mBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,mBAAA;AAEA;;AAEG;;AACH,EAAA,kBAAA,CAAA,kBAAA,CAAA,uBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,uBAAA;AAEA;;;AAGG;;AACH,EAAA,kBAAA,CAAA,kBAAA,CAAA,4BAAA,CAAA,GAAA,CAAA,CAAA,GAAA,4BAAA;AAEA;;;AAGG;;AACH,EAAA,kBAAA,CAAA,kBAAA,CAAA,0BAAA,CAAA,GAAA,EAAA,CAAA,GAAA,0BAAA;AAEH,CAxED,EAAK,kBAAkB,KAAlB,kBAAkB,GAAA,EAAA,CAAvB;;AA0EA,OAAA,CAAA,OAAA,GAAe,kBAAf","sourceRoot":"","sourcesContent":["\"use strict\";\r\n/*\r\n * Copyright 2008 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*namespace com.google.zxing {*/\r\n/**\r\n * Represents some type of metadata about the result of the decoding that the decoder\r\n * wishes to communicate back to the caller.\r\n *\r\n * @author Sean Owen\r\n */\r\nvar ResultMetadataType;\r\n(function (ResultMetadataType) {\r\n    /**\r\n     * Unspecified, application-specific metadata. Maps to an unspecified {@link Object}.\r\n     */\r\n    ResultMetadataType[ResultMetadataType[\"OTHER\"] = 0] = \"OTHER\";\r\n    /**\r\n     * Denotes the likely approximate orientation of the barcode in the image. This value\r\n     * is given as degrees rotated clockwise from the normal, upright orientation.\r\n     * For example a 1D barcode which was found by reading top-to-bottom would be\r\n     * said to have orientation \"90\". This key maps to an {@link Integer} whose\r\n     * value is in the range [0,360).\r\n     */\r\n    ResultMetadataType[ResultMetadataType[\"ORIENTATION\"] = 1] = \"ORIENTATION\";\r\n    /**\r\n     * <p>2D barcode formats typically encode text, but allow for a sort of 'byte mode'\r\n     * which is sometimes used to encode binary data. While {@link Result} makes available\r\n     * the complete raw bytes in the barcode for these formats, it does not offer the bytes\r\n     * from the byte segments alone.</p>\r\n     *\r\n     * <p>This maps to a {@link java.util.List} of byte arrays corresponding to the\r\n     * raw bytes in the byte segments in the barcode, in order.</p>\r\n     */\r\n    ResultMetadataType[ResultMetadataType[\"BYTE_SEGMENTS\"] = 2] = \"BYTE_SEGMENTS\";\r\n    /**\r\n     * Error correction level used, if applicable. The value type depends on the\r\n     * format, but is typically a String.\r\n     */\r\n    ResultMetadataType[ResultMetadataType[\"ERROR_CORRECTION_LEVEL\"] = 3] = \"ERROR_CORRECTION_LEVEL\";\r\n    /**\r\n     * For some periodicals, indicates the issue number as an {@link Integer}.\r\n     */\r\n    ResultMetadataType[ResultMetadataType[\"ISSUE_NUMBER\"] = 4] = \"ISSUE_NUMBER\";\r\n    /**\r\n     * For some products, indicates the suggested retail price in the barcode as a\r\n     * formatted {@link String}.\r\n     */\r\n    ResultMetadataType[ResultMetadataType[\"SUGGESTED_PRICE\"] = 5] = \"SUGGESTED_PRICE\";\r\n    /**\r\n     * For some products, the possible country of manufacture as a {@link String} denoting the\r\n     * ISO country code. Some map to multiple possible countries, like \"US/CA\".\r\n     */\r\n    ResultMetadataType[ResultMetadataType[\"POSSIBLE_COUNTRY\"] = 6] = \"POSSIBLE_COUNTRY\";\r\n    /**\r\n     * For some products, the extension text\r\n     */\r\n    ResultMetadataType[ResultMetadataType[\"UPC_EAN_EXTENSION\"] = 7] = \"UPC_EAN_EXTENSION\";\r\n    /**\r\n     * PDF417-specific metadata\r\n     */\r\n    ResultMetadataType[ResultMetadataType[\"PDF417_EXTRA_METADATA\"] = 8] = \"PDF417_EXTRA_METADATA\";\r\n    /**\r\n     * If the code format supports structured append and the current scanned code is part of one then the\r\n     * sequence number is given with it.\r\n     */\r\n    ResultMetadataType[ResultMetadataType[\"STRUCTURED_APPEND_SEQUENCE\"] = 9] = \"STRUCTURED_APPEND_SEQUENCE\";\r\n    /**\r\n     * If the code format supports structured append and the current scanned code is part of one then the\r\n     * parity is given with it.\r\n     */\r\n    ResultMetadataType[ResultMetadataType[\"STRUCTURED_APPEND_PARITY\"] = 10] = \"STRUCTURED_APPEND_PARITY\";\r\n})(ResultMetadataType || (ResultMetadataType = {}));\r\nexports.default = ResultMetadataType;\r\n//# sourceMappingURL=ResultMetadataType.js.map"]},"metadata":{},"sourceType":"script"}