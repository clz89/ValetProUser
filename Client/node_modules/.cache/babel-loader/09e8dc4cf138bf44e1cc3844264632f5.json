{"ast":null,"code":"\"use strict\";\n/*\r\n * Copyright 2013 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // package com.google.zxing.pdf417.decoder;\n// import com.google.zxing.pdf417.PDF417Common;\n\nvar PDF417Common_1 = require(\"../PDF417Common\"); // import java.util.ArrayList;\n// import java.util.Collection;\n// import java.util.HashMap;\n// import java.util.Map;\n// import java.util.Map.Entry;\n\n/**\r\n * @author Guenther Grau\r\n */\n\n\nvar BarcodeValue =\n/** @class */\nfunction () {\n  function BarcodeValue() {\n    this.values = new Map();\n  }\n  /**\r\n   * Add an occurrence of a value\r\n   */\n\n\n  BarcodeValue.prototype.setValue = function (value) {\n    value = Math.trunc(value);\n    var confidence = this.values.get(value);\n\n    if (confidence == null) {\n      confidence = 0;\n    }\n\n    confidence++;\n    this.values.set(value, confidence);\n  };\n  /**\r\n   * Determines the maximum occurrence of a set value and returns all values which were set with this occurrence.\r\n   * @return an array of int, containing the values with the highest occurrence, or null, if no value was set\r\n   */\n\n\n  BarcodeValue.prototype.getValue = function () {\n    var e_1, _a;\n\n    var maxConfidence = -1;\n    var result = new Array();\n\n    var _loop_1 = function (key, value) {\n      var entry = {\n        getKey: function () {\n          return key;\n        },\n        getValue: function () {\n          return value;\n        }\n      };\n\n      if (entry.getValue() > maxConfidence) {\n        maxConfidence = entry.getValue();\n        result = [];\n        result.push(entry.getKey());\n      } else if (entry.getValue() === maxConfidence) {\n        result.push(entry.getKey());\n      }\n    };\n\n    try {\n      for (var _b = __values(this.values.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var _d = __read(_c.value, 2),\n            key = _d[0],\n            value = _d[1];\n\n        _loop_1(key, value);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return PDF417Common_1.default.toIntArray(result);\n  };\n\n  BarcodeValue.prototype.getConfidence = function (value) {\n    return this.values.get(value);\n  };\n\n  return BarcodeValue;\n}();\n\nexports.default = BarcodeValue;","map":{"version":3,"sources":["../../../../src/core/pdf417/decoder/BarcodeValue.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEH;AAEA;;AACA,IAAA,cAAA,GAAA,OAAA,CAAA,iBAAA,CAAA,C,CAIA;AACA;AACA;AACA;AACA;;AAEA;;AAEG;;;AACH,IAAA,YAAA;AAAA;AAAA,YAAA;AAAA,WAAA,YAAA,GAAA;AACoB,SAAA,MAAA,GAAS,IAAI,GAAJ,EAAT;AA4CnB;AA1CC;;AAEG;;;AACF,EAAA,YAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,KAAT,EAAmB;AAClB,IAAA,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,KAAX,CAAR;AACA,QAAI,UAAU,GAAQ,KAAK,MAAL,CAAY,GAAZ,CAAgB,KAAhB,CAAtB;;AACA,QAAI,UAAU,IAAI,IAAlB,EAAwB;AACtB,MAAA,UAAU,GAAG,CAAb;AACD;;AACD,IAAA,UAAU;AACV,SAAK,MAAL,CAAY,GAAZ,CAAgB,KAAhB,EAAuB,UAAvB;AACD,GARA;AAUD;;;AAGG;;;AACF,EAAA,YAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;;;AACC,QAAI,aAAa,GAAQ,CAAC,CAA1B;AACA,QAAI,MAAM,GAAoB,IAAI,KAAJ,EAA9B;;4BACY,G,EAAK,K,EAAK;AAEpB,UAAM,KAAK,GAAG;AACZ,QAAA,MAAM,EAAE,YAAA;AAAM,iBAAA,GAAA;AAAG,SADL;AAEZ,QAAA,QAAQ,EAAE,YAAA;AAAM,iBAAA,KAAA;AAAK;AAFT,OAAd;;AAKA,UAAI,KAAK,CAAC,QAAN,KAAmB,aAAvB,EAAsC;AACpC,QAAA,aAAa,GAAG,KAAK,CAAC,QAAN,EAAhB;AACA,QAAA,MAAM,GAAG,EAAT;AACA,QAAA,MAAM,CAAC,IAAP,CAAY,KAAK,CAAC,MAAN,EAAZ;AACD,OAJD,MAIO,IAAI,KAAK,CAAC,QAAN,OAAqB,aAAzB,EAAwC;AAC7C,QAAA,MAAM,CAAC,IAAP,CAAY,KAAK,CAAC,MAAN,EAAZ;AACD;;;;AAbH,WAA2B,IAAA,EAAA,GAAA,QAAA,CAAA,KAAK,MAAL,CAAY,OAAZ,EAAA,CAAA,EAAqB,EAAA,GAAA,EAAA,CAAA,IAAA,EAAhD,EAAgD,CAAA,EAAA,CAAA,IAAhD,EAAgD,EAAA,GAAA,EAAA,CAAA,IAAA,EAAhD,EAAgD;AAArC,YAAA,EAAA,GAAA,MAAA,CAAA,EAAA,CAAA,KAAA,EAAA,CAAA,CAAA;AAAA,YAAC,GAAA,GAAA,EAAA,CAAA,CAAA,CAAD;AAAA,YAAM,KAAA,GAAA,EAAA,CAAA,CAAA,CAAN;;gBAAC,G,EAAK,K;AAchB;;;;;;;;;;;;;AACD,WAAO,cAAA,CAAA,OAAA,CAAa,UAAb,CAAwB,MAAxB,CAAP;AACD,GAnBA;;AAqBA,EAAA,YAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UAAc,KAAd,EAAwB;AACvB,WAAO,KAAK,MAAL,CAAY,GAAZ,CAAgB,KAAhB,CAAP;AACD,GAFA;;AAIH,SAAA,YAAA;AAAC,CA7CD,EAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\n/*\r\n * Copyright 2013 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __values = (this && this.__values) || function (o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n};\r\nvar __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// package com.google.zxing.pdf417.decoder;\r\n// import com.google.zxing.pdf417.PDF417Common;\r\nvar PDF417Common_1 = require(\"../PDF417Common\");\r\n// import java.util.ArrayList;\r\n// import java.util.Collection;\r\n// import java.util.HashMap;\r\n// import java.util.Map;\r\n// import java.util.Map.Entry;\r\n/**\r\n * @author Guenther Grau\r\n */\r\nvar BarcodeValue = /** @class */ (function () {\r\n    function BarcodeValue() {\r\n        this.values = new Map();\r\n    }\r\n    /**\r\n     * Add an occurrence of a value\r\n     */\r\n    BarcodeValue.prototype.setValue = function (value) {\r\n        value = Math.trunc(value);\r\n        var confidence = this.values.get(value);\r\n        if (confidence == null) {\r\n            confidence = 0;\r\n        }\r\n        confidence++;\r\n        this.values.set(value, confidence);\r\n    };\r\n    /**\r\n     * Determines the maximum occurrence of a set value and returns all values which were set with this occurrence.\r\n     * @return an array of int, containing the values with the highest occurrence, or null, if no value was set\r\n     */\r\n    BarcodeValue.prototype.getValue = function () {\r\n        var e_1, _a;\r\n        var maxConfidence = -1;\r\n        var result = new Array();\r\n        var _loop_1 = function (key, value) {\r\n            var entry = {\r\n                getKey: function () { return key; },\r\n                getValue: function () { return value; },\r\n            };\r\n            if (entry.getValue() > maxConfidence) {\r\n                maxConfidence = entry.getValue();\r\n                result = [];\r\n                result.push(entry.getKey());\r\n            }\r\n            else if (entry.getValue() === maxConfidence) {\r\n                result.push(entry.getKey());\r\n            }\r\n        };\r\n        try {\r\n            for (var _b = __values(this.values.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var _d = __read(_c.value, 2), key = _d[0], value = _d[1];\r\n                _loop_1(key, value);\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n        return PDF417Common_1.default.toIntArray(result);\r\n    };\r\n    BarcodeValue.prototype.getConfidence = function (value) {\r\n        return this.values.get(value);\r\n    };\r\n    return BarcodeValue;\r\n}());\r\nexports.default = BarcodeValue;\r\n//# sourceMappingURL=BarcodeValue.js.map"]},"metadata":{},"sourceType":"script"}