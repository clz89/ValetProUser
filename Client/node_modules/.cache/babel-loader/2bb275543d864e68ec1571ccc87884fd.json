{"ast":null,"code":"\"use strict\";\n/*\r\n * Copyright 2008 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.oned {*/\n\nvar BarcodeFormat_1 = require(\"../BarcodeFormat\");\n\nvar DecodeHintType_1 = require(\"../DecodeHintType\");\n\nvar Result_1 = require(\"../Result\");\n\nvar ResultPoint_1 = require(\"../ResultPoint\");\n\nvar OneDReader_1 = require(\"./OneDReader\");\n\nvar StringBuilder_1 = require(\"../util/StringBuilder\");\n\nvar System_1 = require(\"../util/System\");\n\nvar FormatException_1 = require(\"../FormatException\");\n\nvar NotFoundException_1 = require(\"../NotFoundException\");\n/**\r\n * <p>Decodes ITF barcodes.</p>\r\n *\r\n * @author Tjieco\r\n */\n\n\nvar ITFReader =\n/** @class */\nfunction (_super) {\n  __extends(ITFReader, _super);\n\n  function ITFReader() {\n    var _this = _super !== null && _super.apply(this, arguments) || this; // Stores the actual narrow line width of the image being decoded.\n\n\n    _this.narrowLineWidth = -1;\n    return _this;\n  } // See ITFWriter.PATTERNS\n\n  /*\r\n    /!**\r\n   * Patterns of Wide / Narrow lines to indicate each digit\r\n   *!/\r\n  */\n\n\n  ITFReader.prototype.decodeRow = function (rowNumber, row, hints) {\n    var e_1, _a; // Find out where the Middle section (payload) starts & ends\n\n\n    var startRange = this.decodeStart(row);\n    var endRange = this.decodeEnd(row);\n    var result = new StringBuilder_1.default();\n    ITFReader.decodeMiddle(row, startRange[1], endRange[0], result);\n    var resultString = result.toString();\n    var allowedLengths = null;\n\n    if (hints != null) {\n      allowedLengths = hints.get(DecodeHintType_1.default.ALLOWED_LENGTHS);\n    }\n\n    if (allowedLengths == null) {\n      allowedLengths = ITFReader.DEFAULT_ALLOWED_LENGTHS;\n    } // To avoid false positives with 2D barcodes (and other patterns), make\n    // an assumption that the decoded string must be a 'standard' length if it's short\n\n\n    var length = resultString.length;\n    var lengthOK = false;\n    var maxAllowedLength = 0;\n\n    try {\n      for (var allowedLengths_1 = __values(allowedLengths), allowedLengths_1_1 = allowedLengths_1.next(); !allowedLengths_1_1.done; allowedLengths_1_1 = allowedLengths_1.next()) {\n        var value = allowedLengths_1_1.value;\n\n        if (length === value) {\n          lengthOK = true;\n          break;\n        }\n\n        if (value > maxAllowedLength) {\n          maxAllowedLength = value;\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (allowedLengths_1_1 && !allowedLengths_1_1.done && (_a = allowedLengths_1.return)) _a.call(allowedLengths_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    if (!lengthOK && length > maxAllowedLength) {\n      lengthOK = true;\n    }\n\n    if (!lengthOK) {\n      throw new FormatException_1.default();\n    }\n\n    var points = [new ResultPoint_1.default(startRange[1], rowNumber), new ResultPoint_1.default(endRange[0], rowNumber)];\n    var resultReturn = new Result_1.default(resultString, null, // no natural byte representation for these barcodes\n    0, points, BarcodeFormat_1.default.ITF, new Date().getTime());\n    return resultReturn;\n  };\n  /*\r\n  /!**\r\n   * @param row          row of black/white values to search\r\n   * @param payloadStart offset of start pattern\r\n   * @param resultString {@link StringBuilder} to append decoded chars to\r\n   * @throws NotFoundException if decoding could not complete successfully\r\n   *!/*/\n\n\n  ITFReader.decodeMiddle = function (row, payloadStart, payloadEnd, resultString) {\n    // Digits are interleaved in pairs - 5 black lines for one digit, and the\n    // 5\n    // interleaved white lines for the second digit.\n    // Therefore, need to scan 10 lines and then\n    // split these into two arrays\n    var counterDigitPair = new Array(10); // 10\n\n    var counterBlack = new Array(5); // 5\n\n    var counterWhite = new Array(5); // 5\n\n    counterDigitPair.fill(0);\n    counterBlack.fill(0);\n    counterWhite.fill(0);\n\n    while (payloadStart < payloadEnd) {\n      // Get 10 runs of black/white.\n      OneDReader_1.default.recordPattern(row, payloadStart, counterDigitPair); // Split them into each array\n\n      for (var k = 0; k < 5; k++) {\n        var twoK = 2 * k;\n        counterBlack[k] = counterDigitPair[twoK];\n        counterWhite[k] = counterDigitPair[twoK + 1];\n      }\n\n      var bestMatch = ITFReader.decodeDigit(counterBlack);\n      resultString.append(bestMatch.toString());\n      bestMatch = this.decodeDigit(counterWhite);\n      resultString.append(bestMatch.toString());\n      counterDigitPair.forEach(function (counterDigit) {\n        payloadStart += counterDigit;\n      });\n    }\n  };\n  /*/!**\r\n   * Identify where the start of the middle / payload section starts.\r\n   *\r\n   * @param row row of black/white values to search\r\n   * @return Array, containing index of start of 'start block' and end of\r\n   *         'start block'\r\n   *!/*/\n\n\n  ITFReader.prototype.decodeStart = function (row) {\n    var endStart = ITFReader.skipWhiteSpace(row);\n    var startPattern = ITFReader.findGuardPattern(row, endStart, ITFReader.START_PATTERN); // Determine the width of a narrow line in pixels. We can do this by\n    // getting the width of the start pattern and dividing by 4 because its\n    // made up of 4 narrow lines.\n\n    this.narrowLineWidth = (startPattern[1] - startPattern[0]) / 4;\n    this.validateQuietZone(row, startPattern[0]);\n    return startPattern;\n  };\n  /*/!**\r\n   * The start & end patterns must be pre/post fixed by a quiet zone. This\r\n   * zone must be at least 10 times the width of a narrow line.  Scan back until\r\n   * we either get to the start of the barcode or match the necessary number of\r\n   * quiet zone pixels.\r\n   *\r\n   * Note: Its assumed the row is reversed when using this method to find\r\n   * quiet zone after the end pattern.\r\n   *\r\n   * ref: http://www.barcode-1.net/i25code.html\r\n   *\r\n   * @param row bit array representing the scanned barcode.\r\n   * @param startPattern index into row of the start or end pattern.\r\n   * @throws NotFoundException if the quiet zone cannot be found\r\n   *!/*/\n\n\n  ITFReader.prototype.validateQuietZone = function (row, startPattern) {\n    var quietCount = this.narrowLineWidth * 10; // expect to find this many pixels of quiet zone\n    // if there are not so many pixel at all let's try as many as possible\n\n    quietCount = quietCount < startPattern ? quietCount : startPattern;\n\n    for (var i = startPattern - 1; quietCount > 0 && i >= 0; i--) {\n      if (row.get(i)) {\n        break;\n      }\n\n      quietCount--;\n    }\n\n    if (quietCount !== 0) {\n      // Unable to find the necessary number of quiet zone pixels.\n      throw new NotFoundException_1.default();\n    }\n  };\n  /*\r\n  /!**\r\n   * Skip all whitespace until we get to the first black line.\r\n   *\r\n   * @param row row of black/white values to search\r\n   * @return index of the first black line.\r\n   * @throws NotFoundException Throws exception if no black lines are found in the row\r\n   *!/*/\n\n\n  ITFReader.skipWhiteSpace = function (row) {\n    var width = row.getSize();\n    var endStart = row.getNextSet(0);\n\n    if (endStart === width) {\n      throw new NotFoundException_1.default();\n    }\n\n    return endStart;\n  };\n  /*/!**\r\n   * Identify where the end of the middle / payload section ends.\r\n   *\r\n   * @param row row of black/white values to search\r\n   * @return Array, containing index of start of 'end block' and end of 'end\r\n   *         block'\r\n   *!/*/\n\n\n  ITFReader.prototype.decodeEnd = function (row) {\n    // For convenience, reverse the row and then\n    // search from 'the start' for the end block\n    row.reverse();\n\n    try {\n      var endStart = ITFReader.skipWhiteSpace(row);\n      var endPattern = void 0;\n\n      try {\n        endPattern = ITFReader.findGuardPattern(row, endStart, ITFReader.END_PATTERN_REVERSED[0]);\n      } catch (NotFoundException) {\n        endPattern = ITFReader.findGuardPattern(row, endStart, ITFReader.END_PATTERN_REVERSED[1]);\n      } // The start & end patterns must be pre/post fixed by a quiet zone. This\n      // zone must be at least 10 times the width of a narrow line.\n      // ref: http://www.barcode-1.net/i25code.html\n\n\n      this.validateQuietZone(row, endPattern[0]); // Now recalculate the indices of where the 'endblock' starts & stops to\n      // accommodate\n      // the reversed nature of the search\n\n      var temp = endPattern[0];\n      endPattern[0] = row.getSize() - endPattern[1];\n      endPattern[1] = row.getSize() - temp;\n      return endPattern;\n    } finally {\n      // Put the row back the right way.\n      row.reverse();\n    }\n  };\n  /*\r\n  /!**\r\n   * @param row       row of black/white values to search\r\n   * @param rowOffset position to start search\r\n   * @param pattern   pattern of counts of number of black and white pixels that are\r\n   *                  being searched for as a pattern\r\n   * @return start/end horizontal offset of guard pattern, as an array of two\r\n   *         ints\r\n   * @throws NotFoundException if pattern is not found\r\n   *!/*/\n\n\n  ITFReader.findGuardPattern = function (row, rowOffset, pattern) {\n    var patternLength = pattern.length;\n    var counters = new Array(patternLength);\n    var width = row.getSize();\n    var isWhite = false;\n    var counterPosition = 0;\n    var patternStart = rowOffset;\n    counters.fill(0);\n\n    for (var x = rowOffset; x < width; x++) {\n      if (row.get(x) !== isWhite) {\n        counters[counterPosition]++;\n      } else {\n        if (counterPosition === patternLength - 1) {\n          if (OneDReader_1.default.patternMatchVariance(counters, pattern, ITFReader.MAX_INDIVIDUAL_VARIANCE) < ITFReader.MAX_AVG_VARIANCE) {\n            return [patternStart, x];\n          }\n\n          patternStart += counters[0] + counters[1];\n          System_1.default.arraycopy(counters, 2, counters, 0, counterPosition - 1);\n          counters[counterPosition - 1] = 0;\n          counters[counterPosition] = 0;\n          counterPosition--;\n        } else {\n          counterPosition++;\n        }\n\n        counters[counterPosition] = 1;\n        isWhite = !isWhite;\n      }\n    }\n\n    throw new NotFoundException_1.default();\n  };\n  /*/!**\r\n   * Attempts to decode a sequence of ITF black/white lines into single\r\n   * digit.\r\n   *\r\n   * @param counters the counts of runs of observed black/white/black/... values\r\n   * @return The decoded digit\r\n   * @throws NotFoundException if digit cannot be decoded\r\n   *!/*/\n\n\n  ITFReader.decodeDigit = function (counters) {\n    var bestVariance = ITFReader.MAX_AVG_VARIANCE; // worst variance we'll accept\n\n    var bestMatch = -1;\n    var max = ITFReader.PATTERNS.length;\n\n    for (var i = 0; i < max; i++) {\n      var pattern = ITFReader.PATTERNS[i];\n      var variance = OneDReader_1.default.patternMatchVariance(counters, pattern, ITFReader.MAX_INDIVIDUAL_VARIANCE);\n\n      if (variance < bestVariance) {\n        bestVariance = variance;\n        bestMatch = i;\n      } else if (variance === bestVariance) {\n        // if we find a second 'best match' with the same variance, we can not reliably report to have a suitable match\n        bestMatch = -1;\n      }\n    }\n\n    if (bestMatch >= 0) {\n      return bestMatch % 10;\n    } else {\n      throw new NotFoundException_1.default();\n    }\n  };\n\n  ITFReader.W = 3; // Pixel width of a 3x wide line\n\n  ITFReader.w = 2; // Pixel width of a 2x wide line\n\n  ITFReader.N = 1; // Pixed width of a narrow line\n\n  ITFReader.PATTERNS = [[1, 1, 2, 2, 1], [2, 1, 1, 1, 2], [1, 2, 1, 1, 2], [2, 2, 1, 1, 1], [1, 1, 2, 1, 2], [2, 1, 2, 1, 1], [1, 2, 2, 1, 1], [1, 1, 1, 2, 2], [2, 1, 1, 2, 1], [1, 2, 1, 2, 1], [1, 1, 3, 3, 1], [3, 1, 1, 1, 3], [1, 3, 1, 1, 3], [3, 3, 1, 1, 1], [1, 1, 3, 1, 3], [3, 1, 3, 1, 1], [1, 3, 3, 1, 1], [1, 1, 1, 3, 3], [3, 1, 1, 3, 1], [1, 3, 1, 3, 1] // 9\n  ];\n  ITFReader.MAX_AVG_VARIANCE = 0.38;\n  ITFReader.MAX_INDIVIDUAL_VARIANCE = 0.5;\n  /* /!** Valid ITF lengths. Anything longer than the largest value is also allowed. *!/*/\n\n  ITFReader.DEFAULT_ALLOWED_LENGTHS = [6, 8, 10, 12, 14];\n  /*/!**\r\n   * Start/end guard pattern.\r\n   *\r\n   * Note: The end pattern is reversed because the row is reversed before\r\n   * searching for the END_PATTERN\r\n   *!/*/\n\n  ITFReader.START_PATTERN = [1, 1, 1, 1];\n  ITFReader.END_PATTERN_REVERSED = [[1, 1, 2], [1, 1, 3] // 3x\n  ];\n  return ITFReader;\n}(OneDReader_1.default);\n\nexports.default = ITFReader;","map":{"version":3,"sources":["../../../src/core/oned/ITFReader.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\n/*\r\n * Copyright 2008 ZXing authors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __values = (this && this.__values) || function (o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*namespace com.google.zxing.oned {*/\r\nvar BarcodeFormat_1 = require(\"../BarcodeFormat\");\r\nvar DecodeHintType_1 = require(\"../DecodeHintType\");\r\nvar Result_1 = require(\"../Result\");\r\nvar ResultPoint_1 = require(\"../ResultPoint\");\r\nvar OneDReader_1 = require(\"./OneDReader\");\r\nvar StringBuilder_1 = require(\"../util/StringBuilder\");\r\nvar System_1 = require(\"../util/System\");\r\nvar FormatException_1 = require(\"../FormatException\");\r\nvar NotFoundException_1 = require(\"../NotFoundException\");\r\n/**\r\n * <p>Decodes ITF barcodes.</p>\r\n *\r\n * @author Tjieco\r\n */\r\nvar ITFReader = /** @class */ (function (_super) {\r\n    __extends(ITFReader, _super);\r\n    function ITFReader() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        // Stores the actual narrow line width of the image being decoded.\r\n        _this.narrowLineWidth = -1;\r\n        return _this;\r\n    }\r\n    // See ITFWriter.PATTERNS\r\n    /*\r\n\r\n    /!**\r\n     * Patterns of Wide / Narrow lines to indicate each digit\r\n     *!/\r\n    */\r\n    ITFReader.prototype.decodeRow = function (rowNumber, row, hints) {\r\n        var e_1, _a;\r\n        // Find out where the Middle section (payload) starts & ends\r\n        var startRange = this.decodeStart(row);\r\n        var endRange = this.decodeEnd(row);\r\n        var result = new StringBuilder_1.default();\r\n        ITFReader.decodeMiddle(row, startRange[1], endRange[0], result);\r\n        var resultString = result.toString();\r\n        var allowedLengths = null;\r\n        if (hints != null) {\r\n            allowedLengths = hints.get(DecodeHintType_1.default.ALLOWED_LENGTHS);\r\n        }\r\n        if (allowedLengths == null) {\r\n            allowedLengths = ITFReader.DEFAULT_ALLOWED_LENGTHS;\r\n        }\r\n        // To avoid false positives with 2D barcodes (and other patterns), make\r\n        // an assumption that the decoded string must be a 'standard' length if it's short\r\n        var length = resultString.length;\r\n        var lengthOK = false;\r\n        var maxAllowedLength = 0;\r\n        try {\r\n            for (var allowedLengths_1 = __values(allowedLengths), allowedLengths_1_1 = allowedLengths_1.next(); !allowedLengths_1_1.done; allowedLengths_1_1 = allowedLengths_1.next()) {\r\n                var value = allowedLengths_1_1.value;\r\n                if (length === value) {\r\n                    lengthOK = true;\r\n                    break;\r\n                }\r\n                if (value > maxAllowedLength) {\r\n                    maxAllowedLength = value;\r\n                }\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (allowedLengths_1_1 && !allowedLengths_1_1.done && (_a = allowedLengths_1.return)) _a.call(allowedLengths_1);\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n        if (!lengthOK && length > maxAllowedLength) {\r\n            lengthOK = true;\r\n        }\r\n        if (!lengthOK) {\r\n            throw new FormatException_1.default();\r\n        }\r\n        var points = [new ResultPoint_1.default(startRange[1], rowNumber), new ResultPoint_1.default(endRange[0], rowNumber)];\r\n        var resultReturn = new Result_1.default(resultString, null, // no natural byte representation for these barcodes\r\n        0, points, BarcodeFormat_1.default.ITF, new Date().getTime());\r\n        return resultReturn;\r\n    };\r\n    /*\r\n    /!**\r\n     * @param row          row of black/white values to search\r\n     * @param payloadStart offset of start pattern\r\n     * @param resultString {@link StringBuilder} to append decoded chars to\r\n     * @throws NotFoundException if decoding could not complete successfully\r\n     *!/*/\r\n    ITFReader.decodeMiddle = function (row, payloadStart, payloadEnd, resultString) {\r\n        // Digits are interleaved in pairs - 5 black lines for one digit, and the\r\n        // 5\r\n        // interleaved white lines for the second digit.\r\n        // Therefore, need to scan 10 lines and then\r\n        // split these into two arrays\r\n        var counterDigitPair = new Array(10); // 10\r\n        var counterBlack = new Array(5); // 5\r\n        var counterWhite = new Array(5); // 5\r\n        counterDigitPair.fill(0);\r\n        counterBlack.fill(0);\r\n        counterWhite.fill(0);\r\n        while (payloadStart < payloadEnd) {\r\n            // Get 10 runs of black/white.\r\n            OneDReader_1.default.recordPattern(row, payloadStart, counterDigitPair);\r\n            // Split them into each array\r\n            for (var k = 0; k < 5; k++) {\r\n                var twoK = 2 * k;\r\n                counterBlack[k] = counterDigitPair[twoK];\r\n                counterWhite[k] = counterDigitPair[twoK + 1];\r\n            }\r\n            var bestMatch = ITFReader.decodeDigit(counterBlack);\r\n            resultString.append(bestMatch.toString());\r\n            bestMatch = this.decodeDigit(counterWhite);\r\n            resultString.append(bestMatch.toString());\r\n            counterDigitPair.forEach(function (counterDigit) {\r\n                payloadStart += counterDigit;\r\n            });\r\n        }\r\n    };\r\n    /*/!**\r\n     * Identify where the start of the middle / payload section starts.\r\n     *\r\n     * @param row row of black/white values to search\r\n     * @return Array, containing index of start of 'start block' and end of\r\n     *         'start block'\r\n     *!/*/\r\n    ITFReader.prototype.decodeStart = function (row) {\r\n        var endStart = ITFReader.skipWhiteSpace(row);\r\n        var startPattern = ITFReader.findGuardPattern(row, endStart, ITFReader.START_PATTERN);\r\n        // Determine the width of a narrow line in pixels. We can do this by\r\n        // getting the width of the start pattern and dividing by 4 because its\r\n        // made up of 4 narrow lines.\r\n        this.narrowLineWidth = (startPattern[1] - startPattern[0]) / 4;\r\n        this.validateQuietZone(row, startPattern[0]);\r\n        return startPattern;\r\n    };\r\n    /*/!**\r\n     * The start & end patterns must be pre/post fixed by a quiet zone. This\r\n     * zone must be at least 10 times the width of a narrow line.  Scan back until\r\n     * we either get to the start of the barcode or match the necessary number of\r\n     * quiet zone pixels.\r\n     *\r\n     * Note: Its assumed the row is reversed when using this method to find\r\n     * quiet zone after the end pattern.\r\n     *\r\n     * ref: http://www.barcode-1.net/i25code.html\r\n     *\r\n     * @param row bit array representing the scanned barcode.\r\n     * @param startPattern index into row of the start or end pattern.\r\n     * @throws NotFoundException if the quiet zone cannot be found\r\n     *!/*/\r\n    ITFReader.prototype.validateQuietZone = function (row, startPattern) {\r\n        var quietCount = this.narrowLineWidth * 10; // expect to find this many pixels of quiet zone\r\n        // if there are not so many pixel at all let's try as many as possible\r\n        quietCount = quietCount < startPattern ? quietCount : startPattern;\r\n        for (var i = startPattern - 1; quietCount > 0 && i >= 0; i--) {\r\n            if (row.get(i)) {\r\n                break;\r\n            }\r\n            quietCount--;\r\n        }\r\n        if (quietCount !== 0) {\r\n            // Unable to find the necessary number of quiet zone pixels.\r\n            throw new NotFoundException_1.default();\r\n        }\r\n    };\r\n    /*\r\n    /!**\r\n     * Skip all whitespace until we get to the first black line.\r\n     *\r\n     * @param row row of black/white values to search\r\n     * @return index of the first black line.\r\n     * @throws NotFoundException Throws exception if no black lines are found in the row\r\n     *!/*/\r\n    ITFReader.skipWhiteSpace = function (row) {\r\n        var width = row.getSize();\r\n        var endStart = row.getNextSet(0);\r\n        if (endStart === width) {\r\n            throw new NotFoundException_1.default();\r\n        }\r\n        return endStart;\r\n    };\r\n    /*/!**\r\n     * Identify where the end of the middle / payload section ends.\r\n     *\r\n     * @param row row of black/white values to search\r\n     * @return Array, containing index of start of 'end block' and end of 'end\r\n     *         block'\r\n     *!/*/\r\n    ITFReader.prototype.decodeEnd = function (row) {\r\n        // For convenience, reverse the row and then\r\n        // search from 'the start' for the end block\r\n        row.reverse();\r\n        try {\r\n            var endStart = ITFReader.skipWhiteSpace(row);\r\n            var endPattern = void 0;\r\n            try {\r\n                endPattern = ITFReader.findGuardPattern(row, endStart, ITFReader.END_PATTERN_REVERSED[0]);\r\n            }\r\n            catch (NotFoundException) {\r\n                endPattern = ITFReader.findGuardPattern(row, endStart, ITFReader.END_PATTERN_REVERSED[1]);\r\n            }\r\n            // The start & end patterns must be pre/post fixed by a quiet zone. This\r\n            // zone must be at least 10 times the width of a narrow line.\r\n            // ref: http://www.barcode-1.net/i25code.html\r\n            this.validateQuietZone(row, endPattern[0]);\r\n            // Now recalculate the indices of where the 'endblock' starts & stops to\r\n            // accommodate\r\n            // the reversed nature of the search\r\n            var temp = endPattern[0];\r\n            endPattern[0] = row.getSize() - endPattern[1];\r\n            endPattern[1] = row.getSize() - temp;\r\n            return endPattern;\r\n        }\r\n        finally {\r\n            // Put the row back the right way.\r\n            row.reverse();\r\n        }\r\n    };\r\n    /*\r\n    /!**\r\n     * @param row       row of black/white values to search\r\n     * @param rowOffset position to start search\r\n     * @param pattern   pattern of counts of number of black and white pixels that are\r\n     *                  being searched for as a pattern\r\n     * @return start/end horizontal offset of guard pattern, as an array of two\r\n     *         ints\r\n     * @throws NotFoundException if pattern is not found\r\n     *!/*/\r\n    ITFReader.findGuardPattern = function (row, rowOffset, pattern) {\r\n        var patternLength = pattern.length;\r\n        var counters = new Array(patternLength);\r\n        var width = row.getSize();\r\n        var isWhite = false;\r\n        var counterPosition = 0;\r\n        var patternStart = rowOffset;\r\n        counters.fill(0);\r\n        for (var x = rowOffset; x < width; x++) {\r\n            if (row.get(x) !== isWhite) {\r\n                counters[counterPosition]++;\r\n            }\r\n            else {\r\n                if (counterPosition === patternLength - 1) {\r\n                    if (OneDReader_1.default.patternMatchVariance(counters, pattern, ITFReader.MAX_INDIVIDUAL_VARIANCE) < ITFReader.MAX_AVG_VARIANCE) {\r\n                        return [patternStart, x];\r\n                    }\r\n                    patternStart += counters[0] + counters[1];\r\n                    System_1.default.arraycopy(counters, 2, counters, 0, counterPosition - 1);\r\n                    counters[counterPosition - 1] = 0;\r\n                    counters[counterPosition] = 0;\r\n                    counterPosition--;\r\n                }\r\n                else {\r\n                    counterPosition++;\r\n                }\r\n                counters[counterPosition] = 1;\r\n                isWhite = !isWhite;\r\n            }\r\n        }\r\n        throw new NotFoundException_1.default();\r\n    };\r\n    /*/!**\r\n     * Attempts to decode a sequence of ITF black/white lines into single\r\n     * digit.\r\n     *\r\n     * @param counters the counts of runs of observed black/white/black/... values\r\n     * @return The decoded digit\r\n     * @throws NotFoundException if digit cannot be decoded\r\n     *!/*/\r\n    ITFReader.decodeDigit = function (counters) {\r\n        var bestVariance = ITFReader.MAX_AVG_VARIANCE; // worst variance we'll accept\r\n        var bestMatch = -1;\r\n        var max = ITFReader.PATTERNS.length;\r\n        for (var i = 0; i < max; i++) {\r\n            var pattern = ITFReader.PATTERNS[i];\r\n            var variance = OneDReader_1.default.patternMatchVariance(counters, pattern, ITFReader.MAX_INDIVIDUAL_VARIANCE);\r\n            if (variance < bestVariance) {\r\n                bestVariance = variance;\r\n                bestMatch = i;\r\n            }\r\n            else if (variance === bestVariance) {\r\n                // if we find a second 'best match' with the same variance, we can not reliably report to have a suitable match\r\n                bestMatch = -1;\r\n            }\r\n        }\r\n        if (bestMatch >= 0) {\r\n            return bestMatch % 10;\r\n        }\r\n        else {\r\n            throw new NotFoundException_1.default();\r\n        }\r\n    };\r\n    ITFReader.W = 3; // Pixel width of a 3x wide line\r\n    ITFReader.w = 2; // Pixel width of a 2x wide line\r\n    ITFReader.N = 1; // Pixed width of a narrow line\r\n    ITFReader.PATTERNS = [\r\n        [1, 1, 2, 2, 1],\r\n        [2, 1, 1, 1, 2],\r\n        [1, 2, 1, 1, 2],\r\n        [2, 2, 1, 1, 1],\r\n        [1, 1, 2, 1, 2],\r\n        [2, 1, 2, 1, 1],\r\n        [1, 2, 2, 1, 1],\r\n        [1, 1, 1, 2, 2],\r\n        [2, 1, 1, 2, 1],\r\n        [1, 2, 1, 2, 1],\r\n        [1, 1, 3, 3, 1],\r\n        [3, 1, 1, 1, 3],\r\n        [1, 3, 1, 1, 3],\r\n        [3, 3, 1, 1, 1],\r\n        [1, 1, 3, 1, 3],\r\n        [3, 1, 3, 1, 1],\r\n        [1, 3, 3, 1, 1],\r\n        [1, 1, 1, 3, 3],\r\n        [3, 1, 1, 3, 1],\r\n        [1, 3, 1, 3, 1] // 9\r\n    ];\r\n    ITFReader.MAX_AVG_VARIANCE = 0.38;\r\n    ITFReader.MAX_INDIVIDUAL_VARIANCE = 0.5;\r\n    /* /!** Valid ITF lengths. Anything longer than the largest value is also allowed. *!/*/\r\n    ITFReader.DEFAULT_ALLOWED_LENGTHS = [6, 8, 10, 12, 14];\r\n    /*/!**\r\n     * Start/end guard pattern.\r\n     *\r\n     * Note: The end pattern is reversed because the row is reversed before\r\n     * searching for the END_PATTERN\r\n     *!/*/\r\n    ITFReader.START_PATTERN = [1, 1, 1, 1];\r\n    ITFReader.END_PATTERN_REVERSED = [\r\n        [1, 1, 2],\r\n        [1, 1, 3] // 3x\r\n    ];\r\n    return ITFReader;\r\n}(OneDReader_1.default));\r\nexports.default = ITFReader;\r\n//# sourceMappingURL=ITFReader.js.map"]},"metadata":{},"sourceType":"script"}